{{ objname }}
{{ underline }}{{ underline }}

.. plot::
    :include-source: False

    import openturns as ot
    import openturns.experimental as otexp
    from matplotlib import pyplot as plt
    from openturns.viewer import View
    if "{{ objname }}" == "EmpiricalBernsteinCopula":
        sample = ot.Dirichlet([1.0, 2.0, 3.0]).getSample(100)
        copula = ot.EmpiricalBernsteinCopula(sample, 4)
    elif "{{ objname }}" == "ExtremeValueCopula":
        copula = ot.ExtremeValueCopula(ot.SymbolicFunction("t", "t^3/2-t/2+1"))
    elif "{{ objname }}" == "MaximumEntropyOrderStatisticsCopula":
        marginals = [ot.Beta(1.5, 3.2, 0.0, 1.0),  ot.Beta(2.0, 4.3, 0.5, 1.2)]
        copula = ot.MaximumEntropyOrderStatisticsCopula(marginals)
    elif "{{ objname }}" == "NormalCopula":
        R = ot.CorrelationMatrix(2)
        R[1, 0] = 0.8
        copula = ot.NormalCopula(R)
    elif "{{ objname }}" == "SklarCopula":
        student = ot.Student(3.0, [1.0] * 2, [3.0] * 2, ot.CorrelationMatrix(2))
        copula =  ot.SklarCopula(student)
    elif "{{ objname }}" == "StudentCopula":
        R = ot.CorrelationMatrix(2)
        R[1, 0] = 0.3
        copula = ot.StudentCopula(3.0, R)
    else:
        copula = ot.{{ objname }}()
    if copula.getDimension() == 1:
        copula = ot.{{ objname }}(2)
    copula.setDescription(["$u_1$", "$u_2$"])
    pdf_graph = copula.drawPDF()
    cdf_graph = copula.drawCDF()
    fig = plt.figure(figsize=(10, 4))
    pdf_axis = fig.add_subplot(121)
    cdf_axis = fig.add_subplot(122)
    View(pdf_graph, figure=fig, axes=[pdf_axis], add_legend=False, square_axes=True)
    View(cdf_graph, figure=fig, axes=[cdf_axis], add_legend=False, square_axes=True)
    title = str(copula)[:100].split("\n")[0]
    fig.suptitle(title)

.. currentmodule:: {{ module }}

.. autoclass:: {{ objname }}

   {% block methods %}
   .. automethod:: __init__
   {% endblock %}

.. minigallery:: {{module}}.{{objname}}
   :add-heading: Examples using the class
