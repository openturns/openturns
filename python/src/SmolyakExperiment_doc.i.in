%feature("docstring") OT::SmolyakExperiment
"Smolyak experiment.

Parameters
----------
experiments : list of :class:`~openturns.WeightedExperiment`
    List of :math:`n` marginal experiments of the Smolyak experiment. 
    Each marginal experiment must have dimension 1.

Notes
-----
The Smolyak design of experiments (DOE) is based on a collection 
of marginal multidimensional elementary designs of experiments. 
Compared to the :class:`~openturns.TensorProductExperiment`, the 
Smolyak experiment has a significantly lower number of nodes [petras2003]_. 
This implementation uses the combination technique ([gerstner1998]_ page 215).
Smolyak quadrature involve weights which are negative ([sullivan2015]_ page 177). 
The size of the experiment is only known after the nodes and weights have been computed, 
that is, after the `generateWithWeights()` method is called. 

Let :math:`\mathcal{X} \subset \mathbb{R}^{d_x}` be the integration domain 
and let :math:`g : \mathcal{X} \rightarrow \mathbb{R}^{d_y}` be an integrable 
function. 
Let :math:`f : \mathcal{X} \rightarrow \mathbb{R}` be a probability density 
function. The Smolyak experiment produces an approximation of the 
integral :

.. math::

    \int_{\mathcal{X}} g(\boldsymbol{x}) f(\boldsymbol{x}) d\boldsymbol{x} 
    \approx \sum_{i = 1}^{s_t} w_i g\left(\boldsymbol{x}_i\right)

where :math:`s_t \in \mathbb{N}` is the size of the Smolyak  
design of experiments, :math:`w_1, ..., w_{s_t} \in \mathbb{R}` are the 
weights and :math:`\boldsymbol{x}_1, ..., \boldsymbol{x}_{s_t} \in \mathbb{R}^{d_x}` 
are the nodes. 

Let :math:`\boldsymbol{k} = (k_1, ..., k_{d_x}) \in (\mathbb{N}^\star)^{d_x}` 
be the multi-index where 

.. math::

    \mathbb{N}^\star = \{1, 2, ..., \}

is the set of natural numbers without zero. 
Consider the 1 and the infinity norms ([leMaitre2010]_ page 57, eq. 3.28):

.. math::

    \|\boldsymbol{k}\|_1 = \sum_{i = 1}^{d_x} k_i \qquad
    \|\boldsymbol{k}\|_\infty = \max_{i = 1} k_i.

for any :math:`\boldsymbol{k} \in (\mathbb{N}^\star)^{d_x}`.

Let :math:`\ell` be an integer representing the level of the quadrature. 
Let :math:`Q_{\ell}^{(1)}` be a marginal quadrature of level :math:`\ell`. 
This marginal quadrature can have dimension 1 (as is suggested by the exponent in the 
notation :math:`Q_{\ell}^{(1)}`), but this is not mandatory. 
Depending on the level :math:`\ell`, we can compute the actual number of nodes 
depending on a particular choice of that number of nodes and depending 
on the quadrature rule. 
The tensor product quadrature is:

.. math::

    T_\ell^{(d_x)} = Q_{\ell}^{(1)} \otimes ... \otimes Q_{\ell}^{(1)}.

In the previous equation, the marginal quadratures are not necessarily 
of the same type. 
For example, if the dimension is equal to 2, the first marginal quadrature may 
be a Gaussian quadrature while the second one may be a random experiment, such 
as a Monte-Carlo design of experiment.

Let :math:`Q_0^{(1)} = \emptyset` be the empty quadrature. 
For any integer :math:`k \in \mathbb{N}`, let :math:`\Delta_k^{(1)}` be the 
difference quadrature defined by:

.. math::

    \Delta_{k}^{(1)} = Q_{k}^{(1)} - Q_{k - 1}^{(1)}.    

Therefore, the quadrature formula :math:`Q_\ell` can be expressed depending 
on difference quadratures:

.. math::

    Q_\ell^{(1)} = \sum_{k = 1}^\ell \Delta_k^{(1)}.

for any :math:`\ell \geq 1`. 

The following equation provides an equivalent equation for the tensor product 
quadrature ([leMaitre2010]_ page 57, eq. 3.30):

.. math::

    T_\ell^{(d_x)} = \sum_{\|\boldsymbol{k}\|_\infty \leq \ell} 
    \Delta_{k_1}^{(1)} \otimes \cdots \otimes \Delta_{k_{d_x}}^{(1)}.

The significant part of the previous equation is the set of multi-indices 
:math:`\|\boldsymbol{k}\|_\infty \leq \ell`, which may be very large 
depending on the dimension of the problem. 

One of the ways to reduce the size of this set is to consider the smaller set 
of mult-indices such that :math:`\|\boldsymbol{k}\|_1 \leq \ell + {d_x} - 1`. The sparse 
quadrature ([leMaitre2010]_ page 57, eq. 3.29, [gerstner1998]_  page 214) 
is introduced in the following definition.

The Smolyak sparse quadrature formula at level :math:`\ell` is :

.. math::

    S_\ell^{(d_x)} = \sum_{\|\boldsymbol{k}\|_1 \leq \ell + p - 1} 
    \Delta_{k_1}^{(1)} \otimes \cdots \otimes \Delta_{k_{d_x}}^{(1)}

for any :math:`\ell \geq 1`. 

As shown by the previous equation, for a given multi-index :math:`\boldsymbol{k}` 
the Smolyak quadrature requires to set the level of each marginal experiment to 
an integer which depends on the multi-index. 
This is done using the `setLevel` method of the marginal quadrature. 

The following formula expresses the multivariate quadrature in terms of 
combinations univariate quadratures, known as the *combination technique*.
The sparse quadrature formula at level :math:`\ell` is :

.. math::

    S_\ell^{(d_x)} = \sum_{\ell \leq \|\boldsymbol{k}\|_1 \leq \ell + d_x - 1} 
    (-1)^{\ell + d_x - \|\boldsymbol{k}\|_1 - 1} 
    {d_x - 1 \choose \|\boldsymbol{k}\|_1 - \ell} 
    Q_{k_1}^{(1)} \otimes \cdots \otimes Q_{k_{d_x}}^{(1)}

for any :math:`\ell \geq 1`. 

The following theorem presents the absolute error of a sparse 
quadrature ([sullivan2015]_ page 177, eq. 9.10).
Assume that :math:`g \in \mathcal{C}^r([0, 1]^{d_x})` and that we use a sparse 
quadrature with :math:`n_\ell` nodes at level :math:`\ell`. 
In this particular case, the probability density function :math:`f` is 
equal to 1. 
Therefore,

.. math::

    \left|\int_{[0, 1]^p} g(\boldsymbol{x}) d\boldsymbol{x} 
    - Q_\ell(g)\right|
    = O \left(n_\ell^{-r} (\log(n_\ell))^{(p - 1)(r + 1)}\right).

See also
--------
WeightedExperiment

Examples
--------
In the following example, we create Smolyak quadrature using two Gauss-Legendre 
marginal quadratures.

>>> import openturns as ot
>>> experiment1 = ot.GaussProductExperiment(ot.Uniform(0.0, 1.0), [3])
>>> experiment2 = ot.GaussProductExperiment(ot.Uniform(0.0, 1.0), [5])
>>> collection = [experiment1, experiment2]
>>> level = 3
>>> multivariate_experiment = ot.SmolyakExperiment(collection, level)
>>> nodes, weights = multivariate_experiment.generateWithWeights()"

// ---------------------------------------------------------------------

%feature("docstring") OT::SmolyakExperiment::getWeightedExperimentCollection
"Get the marginals of the experiment.

Returns
-------
experiments : list of :class:`~openturns.WeightedExperiment`
    List of the marginals of the experiment."

// ---------------------------------------------------------------------

%feature("docstring") OT::SmolyakExperiment::setWeightedExperimentCollection
"Set the marginals of the experiment.

Parameters
----------
experiments : list of :class:`~openturns.WeightedExperiment`
    List of the marginals of the experiment."
