%feature("docstring") OT::PointConditionalDistribution
"Distribution conditioned by a deterministic vector.

.. warning::
    This class is experimental and likely to be modified in future releases.
    To use it, import the ``openturns.experimental`` submodule.



Parameters
----------
distribution : :class:`~openturns.Distribution`,
    Distribution of :math:`\inputRV`.
conditioningIndices : sequence of int,
    Conditioning vector indices :math:`\mathcal{I}`.
conditioningValues : sequence of float,
    Conditioning vector values :math:`\vect{x}_\mathcal{I}`.

Notes
-----
Let :math:`\inputRV` be a random vector of dimension :math:`\inputDim`, which probability density function is
denoted by :math:`p_{\inputRV}`.
Let :math:`\cI` be a set of indices selecting some components
of :math:`\inputRV` and :math:`\vect{x}_\cI` a real vector of conditioning values. Then this class implements
the distribution of:

.. math::

    \inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI

which PDF is defined by:

.. math::
    :label: condPDF

    p_{\inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI}(x_{\overline{\cI}})  = \dfrac{p_{\inputRV}(\vect{x
    }_{\overline{\cI}}, \vect{x}_{\cI})}{p_{\inputRV_{\cI}}(\vect{x}_{\cI})}

Simplification mechanisms to compute :eq:`condPDF` are implemented for some distributions. To know if
a simplification mechanism exists, ask the method *hasSimplifiedVersion*.

In the case where no simplification mechanism has been implemented for the distribution of :math:`\inputRV`, then the range of
the conditioned distribution is computed according to one of the 4 following strategies. The default strategy is defined in the
:class:`~openturns.ResourceMap`, entry *PointConditionalDistribution-RangeAdaptationMethod*.


**Strategy None**: The numerical range of :math:`\inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI` is the same as the
numerical range of :math:`\inputRV_{\overline{\cI}}`.
This range is exact for all distributions with bounded support. For distributions with unbounded support,
it is potentially false when the conditional values are very close to the bounds of the initial numerical support.


**Strategy Normal**: Let  :math:`\vect{Y}` be the Gaussian vector of dimension :math:`\inputDim`, which mean vector
is defined by :math:`\vect{\mu} = \Expect{\inputRV}` and covariance matrix is defined by :math:`\mat{C} = \Cov{\inputRV}`.
Then, we build the conditioned Gaussian vector:

.. math::

    \vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{x}_\cI


The numerical range :math:`\cD \left(\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{x}_\cI \right)` of
:math:`\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{x}_\cI` is known exactly thanks to the simplification mechanism
implemented for Gaussian vectors. We assign to :math:`\inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI` the
range :math:`\cD \left(\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{x}_\cI \right)`:

.. math::

    \cD\left(\inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI \right) = \cD \left(\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI
    = \vect{x}_\cI \right)


**Strategy NormalCopula**: Let  :math:`\vect{Y}` be the Gaussian vector of dimension :math:`\inputDim`, with zero mean,
unit variance and which correlation matrix :math:`\mat{R}` is defined from the Spearman correlation matrix of :math:`\inputRV`:
:math:`\left( \rho_S(X_i, X_j) \right)_{1 \leq i, j \leq \inputDim}`. Thus, :math:`\vect{Y}` is the standard representant
of the normal copula having the same correlation as :math:`\inputRV`.

For each conditioning value :math:`x_i`, we define the quantile :math:`q_i` of the normal distribution with zero mean and unit
variance associated to the same order as :math:`x_i`, for :math:`i \in \cI`:

.. math::

    q_i & = \Phi^{-1} \circ F_i \left (x_i \right)

where :math:`\Phi` is the CDF of the normal distribution with zero mean and unit variance. Then, we build the conditioned
Gaussian vector:

.. math::

    \vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{q}_\cI

which numerical range :math:`\cD\left(\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{q}_\cI \right)` can be exactly computed.
Let it be:

.. math::

    \cD\left(\vect{Y}_{\overline{\cI}}|\vect{Y}_\cI = \vect{q}_\cI \right) = \prod_{i\in \overline{\cI}}
    \left[ y_i^{min}, y_i^{max}\right]

Then, inversely, we compute the quantiles of each :math:`F_i` for :math:`i \in \cI` which have the same order as the bounds
:math:`y_i^{min}` and :math:`y_i^{max}` with respect :math:`\Phi`:

.. math::

    x_i^{min} & = F_i^{-1}\circ \Phi \left (y_i^{min} \right) \\
    x_i^{max} & = F_i^{-1}\circ \Phi \left (y_i^{max} \right)

We assign to :math:`\inputRV_{\overline{\cI}}|\inputRV_\cI = \vect{x}_\cI` the numerical range defined by:

.. math::

    \cD \left(\vect{X}_{\overline{\cI}}|\vect{X}_\cI = \vect{x}_\cI \right) = \prod_{i\in \overline{\cI}} \left[ x_i^{min},
    x_i^{max}\right]

The default integration algorithm is :class:`openturns.experimental.CubaIntegration` if available
(or :class:`openturns.GaussKronrod` in dimension) or else :class:`openturns.SimplicialCubature`.

Various :class:`~openturns.ResourceMap` entries allow for a more fine-grained control over the distribution:

- The string entry `PointConditionalDistribution-CubaAlgorithm` defines the default Cuba algorithm name used.
- The string entry `PointConditionalDistribution-OptimizationAlgorithm` defines the default optimization algorithm name used.
- The integer entry `PointConditionalDistribution-RatioUniformCandidateNumber` sets the number
  of candidates to find a feasible points for the ration of uniforms method initialization.
- The integer entry `PointConditionalDistribution-SmallDimension` is the dimension threshold
  from which to switch to CDF inversion sampling instead of ratio of uniforms (for continuous distribution).
- The boolean entry `PointConditionalDistribution-UseSimplifiedVersion` decides if simplification is enabled.
- The boolean entry `PointConditionalDistribution-InitializeTransformation` decides whether
  to initialize the iso-proabilistic transformation.
- The boolean entry `PointConditionalDistribution-InitializeSampling` decides whether to initialize the ratio of uniforms method.

Examples
--------
>>> import openturns as ot
>>> import openturns.experimental as otexp
>>> indices = [1]
>>> values = [2.0]
>>> normal = ot.Normal(3)
>>> R = ot.CorrelationMatrix(3)
>>> R[1, 0] = R[2, 0] = R[2, 1] = 0.9
>>> normal.setR(R)
>>> distribution = otexp.PointConditionalDistribution(normal, indices, values)
>>> sample = distribution.getSample(2)"

// ----------------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::getDistribution
"Underlying distribution accessor.

Returns
-------
distribution : :class:`~openturns.Distribution`
    Distribution :math:`L_\theta(\inputReal)`"

// ----------------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::getConditioningIndices
"Conditioning vector indices accessor.

Returns
-------
conditioningIndices : :class:`~openturns.Indices`
    Conditioning vector indices :math:`\mathcal{I}`"

// ----------------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::getConditioningValues
"Conditioning vector values accessor.

Returns
-------
conditioningValues : :class:`~openturns.Point`
    Conditioning vector values :math:`\vect{x}_\mathcal{I}`"

// ----------------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::getSimplifiedVersion
"Simplified distribution accessor.

Returns
-------
simplified : :class:`~openturns.Distribution`
    Simplified distribution in the following cases:

    - no conditionning (empty indices)
    - independent copula
    - elliptical distributions (Normal, Student)
    - JointDistribution, BlockIndependentDistribution, BlockIndependentCopula
    - Mixture, KernelMixture
    - Bernstein copula

"

// ---------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::getIntegrationAlgorithm
"Accessor to the integration algorithm used to compute the CDF.

Returns
-------
algo : :class:`~openturns.IntegrationAlgorithm`
    Integration algorithm used to compute the CDF.
    Default value is :class:`openturns.experimental.CubaIntegration`
    if available or else :class:`openturns.SimplicialCubature`."

// ---------------------------------------------------------------------

%feature("docstring") OT::PointConditionalDistribution::setIntegrationAlgorithm
"Accessor to the integration algorithm used to compute the CDF.

Parameters
----------
algo : :class:`~openturns.IntegrationAlgorithm`
    Integration algorithm used to compute the CDF.
    Default value is :class:`openturns.experimental.CubaIntegration`
    if available or else :class:`openturns.SimplicialCubature`."
