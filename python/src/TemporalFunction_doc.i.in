%feature("docstring") OT::TemporalFunction
"Temporal function.

Available constructors:
    TemporalFunction(*meshDimension=1*)

    TemporalFunction(*h, meshDimension=1*)

Parameters
----------
h : :class:`~openturns.NumericalMathFunction`
    Function :math:`h: \Rset^n \times \Rset^d \mapsto \Rset^q`.
meshDimension : int, :math:`n \geq 0`
    Dimension of the vertices of the mesh :math:`\cM`. This data is required
    for tests on the compatibility of dimension when a composite process is
    created using the temporal function.

Notes
-----
A temporal function
:math:`f_{temp}: \cD \times \Rset^d \mapsto \cD \times \Rset^q`, with
:math:`\cD \in \Rset^n`, is a particular
:class:`dynamical function <openturns.DynamicalFunction>` that lets invariant
the mesh of a field and defined by a function
:math:`h : \Rset^n \times \Rset^d \mapsto \Rset^q` such that:

.. math::

  f_{temp}(\vect{t}, \vect{x})=(\vect{t}, h(\vect{t},\vect{x}))

Let's note that the input dimension of :math:`f_{temp}` still design the
dimension of :math:`\vect{x}`: :math:`d`. Its output dimension is equal to
:math:`q`.

See also
--------
SpatialFunction

Examples
--------
>>> import openturns as ot

Create a function :math:`h : \Rset^n \times \Rset^d \mapsto \Rset^q` such as:

.. math::

    h: \left|\begin{array}{rcl}
                \Rset \times \Rset & \rightarrow & \Rset \\
                (t, x) & \mapsto & (x + t^2)
            \end{array}\right.

>>> h = ot.NumericalMathFunction(['t', 'x'], ['x + t^2'])

Convert :math:`h` into a temporal function with :math:`n` the dimension of the
mesh of the field on which :math:`h` will be applied:

>>> n = 1
>>> myTemporalFunction = ot.TemporalFunction(h, n)
>>> # Create a TimeSeries
>>> tg = ot.RegularGrid(0.0, 0.2, 6)
>>> data = ot.NumericalSample(tg.getN(), h.getInputDimension()-1)
>>> for i in range(data.getSize()):
...     for j in range(data.getDimension()):
...         data[i, j] = i * data.getDimension() + j
>>> ts = ot.TimeSeries(tg, data)
>>> print(ts)
    [ t   v0  ]
0 : [ 0   0   ]
1 : [ 0.2 1   ]
2 : [ 0.4 2   ]
3 : [ 0.6 3   ]
4 : [ 0.8 4   ]
5 : [ 1   5   ]
>>> print(myTemporalFunction(ts))
    [ t    y0   ]
0 : [ 0    0    ]
1 : [ 0.2  1.04 ]
2 : [ 0.4  2.16 ]
3 : [ 0.6  3.36 ]
4 : [ 0.8  4.64 ]
5 : [ 1    6    ]"

// ---------------------------------------------------------------------

%feature("docstring") OT::TemporalFunction::getEvaluation
"Get the evaluation function of :math:`h`.

Returns
-------
h : :class:`~openturns.NumericalMathEvaluationImplementation`
    Evaluation function of
    :math:`h: \Rset^n \times \Rset^d \mapsto \Rset^q`.

Examples
--------
>>> import openturns as ot
>>> h = ot.NumericalMathFunction(['t', 'x'], ['x + t^2'])
>>> n = 1
>>> myTemporalFunction = ot.SpatialFunction(h, n)
>>> print(myTemporalFunction.getEvaluation())
[t,x]->[x + t^2]"
