%feature("docstring") OT::MartinezSensitivityAlgorithm
"Sensitivity analysis using Martinez method.

Available constructors:
    MartinezSensitivityAlgorithm(*inputDesign, outputDesign, N*)

    MartinezSensitivityAlgorithm(*distribution, N, model, computeSecondOrder*)

    MartinezSensitivityAlgorithm(*experiment, model, computeSecondOrder*)

Parameters
----------
inputDesign : :class:`~openturns.Sample`
    Design for the evaluation of sensitivity indices, obtained
    thanks to the SobolIndicesAlgorithmImplementation.Generate method
outputDesign : :class:`~openturns.Sample`
    Design for the evaluation of sensitivity indices, obtained as the evaluation
    of a Function (model) on the previous inputDesign
distribution : :class:`~openturns.Distribution`
    Input probabilistic model.
    Should have independent copula
experiment : :class:`~openturns.WeightedExperiment`
    Experiment for the generation of two independent samples.
N : int
    Size of samples to generate
computeSecondOrder : bool
    If True, design that will be generated contains elements for the evaluation
    of second order indices.

Notes
-----
This class is concerned with analyzing the influence the random vector
:math:`\vect{X} = \left( X^1, \ldots, X^{n_X} \right)` has on a random variable
:math:`Y^k` which is being studied for uncertainty, by using the [martinez2011]_
method for the evaluation of both first and total order indices.

These last ones are respectively given as follows:

.. math::

   \begin{array}{ccc}
   \hat{S_i} & = & \rho_n(G(B), G(E^i)) \\
   \hat{ST_i} & = & 1 - \rho_n(G(A), G(E^i)) \\
   \end{array}

where :math:`\rho_n` is the empirical correlation defined by:

.. math::

   \rho_n(X, Y) = \frac{\Cov{X,Y}}{\sqrt{\Var{X} \Var{Y}}}


The variance of the estimator is computed using:

.. math::

    \begin{array}{ccc}
    U_i = \left(\left(\textsuperscript{c}Y_i^B \textsuperscript{c}Y_i^E \right), \left(\textsuperscript{c}Y_i^B\right)^2, \left(\textsuperscript{c}Y_i^E \right)^2 \right)^T \\
    \Psi_i(x, y, z) = \frac{x}{\sqrt{y\times z}}
    \end{array}

.. math::

    \begin{array}{ccc}
    U_{-i} = \left(\textsuperscript{c}Y_i^A \textsuperscript{c}Y_i^E, \left(\textsuperscript{c}Y_i^A\right)^2, \left(\textsuperscript{c}Y_i^E\right)^2 \right)^T \\
    \Psi_{-i}(x, y, z) = 1 - \frac{x}{\sqrt{y\times z}}
    \end{array}

See also
--------
SobolIndicesAlgorithm

Examples
--------

Estimate first and total order Sobol' indices:

>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> formula = ['sin(pi_*X1)+7*sin(pi_*X2)^2+0.1*(pi_*X3)^4*sin(pi_*X1)']
>>> model = ot.SymbolicFunction(['X1', 'X2', 'X3'], formula)
>>> distribution = ot.ComposedDistribution([ot.Uniform(-1.0, 1.0)] * 3)
>>> # Define designs to pre-compute
>>> size = 100
>>> inputDesign = ot.SobolIndicesExperiment(distribution, size).generate()
>>> outputDesign = model(inputDesign)
>>> # sensitivity analysis algorithm
>>> sensitivityAnalysis = ot.MartinezSensitivityAlgorithm(inputDesign, outputDesign, size)
>>> print(sensitivityAnalysis.getFirstOrderIndices())
[0.30449,0.448506,-0.0711394]
>>> print(sensitivityAnalysis.getTotalOrderIndices())
[0.543004,0.29501,0.304615]

Estimate first, total and second order Sobol' indices:

>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> formula = ['sin(pi_*X1)+7*sin(pi_*X2)^2+0.1*(pi_*X3)^4*sin(pi_*X1)']
>>> model = ot.SymbolicFunction(['X1', 'X2', 'X3'], formula)
>>> distribution = ot.ComposedDistribution([ot.Uniform(-1.0, 1.0)] * 3)
>>> # Define designs to pre-compute
>>> size = 100
>>> computeSecondOrderIndices = True
>>> inputDesign = ot.SobolIndicesExperiment(distribution, size, computeSecondOrderIndices).generate()
>>> outputDesign = model(inputDesign)
>>> # sensitivity analysis algorithm
>>> sensitivityAnalysis = ot.MartinezSensitivityAlgorithm(inputDesign, outputDesign, size)
>>> print(sensitivityAnalysis.getFirstOrderIndices())
[0.30449,0.448506,-0.0711394]
>>> print(sensitivityAnalysis.getTotalOrderIndices())
[0.543004,0.29501,0.304615]
>>> print(sensitivityAnalysis.getSecondOrderIndices())
[[  0        -0.18008   0.169767 ]
 [ -0.18008   0        -0.198839 ]
 [  0.169767 -0.198839  0        ]]"

