%feature("docstring") OT::MartinezSensitivityAlgorithm
"Sensitivity analysis using Martinez method

Available constructors:
    MartinezSensitivityAlgorithm(*inputDesign, outputDesign, N, computeSecondOrder*)

    MartinezSensitivityAlgorithm(*distribution, N, model, computeSecondOrder*)
    
    MartinezSensitivityAlgorithm(*experiment, model, computeSecondOrder*)

Parameters
----------
inputDesign : :class:`~openturns.NumericalSample`
    Design for the evaluation of sensitivity indices, obtained
    thanks to the SobolIndicesAlgorithmImplementation.Generate method
outputDesign : :class:`~openturns.NumericalSample`
    Design for the evaluation of sensitivity indices, obtained as the evaluation
    of a NumericalMathFunction (model) on the previous inputDesign
distribution : :class:`~openturns.Distribution`
    Input probabilistic model.
    Should have independent copula
experiment : :class:`~openturns.WeightedExperiment`
    Experiment for the generation of two independent samples.
N : int
    Size of samples to generate
computeSecondOrder : bool
    If True, design that will be generated contains elements for the evaluation
    of second order indices.

Notes
-----
This class is concerned with analyzing the influence the random vector
:math:`\vect{X} = \left( X^1, \ldots, X^{n_X} \right)` has on a random variable
:math:`Y^k` which is being studied for uncertainty, by using the [Martinez2011]_
method for the evaluation of both first and total order indices.

These last ones are respectively given as follows:

.. math::

   \begin{array}{ccc}
   \hat{S_i} & = & \rho_n(G(B), G(E^i)) \\
   \hat{ST_i} & = & 1 - \rho_n(G(A), G(E^i)) \\
   \end{array}

where :math:`\rho_n` is the empirical correlation defined by:

.. math::

   \rho_n(X, Y) = \frac{\Cov{X,Y}}{\sqrt{\Var{X} \Var{Y}}}

The class provides also the evaluation of asymptotic confidence interval for first
and total order indices, relying on the Fisher transformation.

This could be performed for gaussian output data. The
`MartinezSensitivityAlgorithm-UseAsmpytoticInterval` resource map key should
be fixed to True in that case.

See also
--------
SobolIndicesAlgorithm

Examples
--------
>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> formula = ['sin(_pi*X1)+7*sin(_pi*X2)*sin(_pi*X2)+' + \
...    '0.1*((_pi*X3)*(_pi*X3)*(_pi*X3)*(_pi*X3))*sin(_pi*X1)']
>>> model = ot.NumericalMathFunction(['X1', 'X2', 'X3'], ['Y'], formula)
>>> distribution = ot.ComposedDistribution([ot.Uniform(-1.0, 1.0)] * 3, \
...                                         ot.IndependentCopula(3))
>>> # Define designs to pre-compute
>>> size = 1000
>>> inputDesign = ot.SobolIndicesAlgorithmImplementation.Generate(distribution, size, True)
>>> outputDesign = model(inputDesign)
>>> # sensitivity analysis algorithm
>>> sensitivityAnalysis = ot.MartinezSensitivityAlgorithm(inputDesign, outputDesign, size)
>>> print(sensitivityAnalysis.getFirstOrderIndices())
[0.326866,0.369471,-0.0809464]"

