%feature("docstring") OT::Ceres
"Interface to Ceres Solver.

This class exposes the solvers from the non-linear least squares optimization library [ceres2012]_.

More details about least squares algorithms are available `here <http://ceres-solver.org/nnls_solving.html>`_.

Algorithms are also available for general unconstrained optimization.

Parameters
----------
problem : :class:`~openturns.OptimizationProblem`
    Optimization problem to solve, either least-squares or general (unconstrained).
algoName : str
    The identifier of the algorithm.
    Use :func:`GetAlgorithmNames()` to list available names.

Notes
-----
Solvers use first order derivative information.

As for constraint support, only the trust-region solvers allow for bound constraints:

+------------------------------+---------------+------------------------+--------------------+
| Algorithm                    | Method type   | Problem type support   | Constraint support |
+==============================+===============+========================+====================+
| LEVENBERG_MARQUARDT          | trust-region  | least-squares          | bounds             |
+------------------------------+---------------+------------------------+--------------------+
| DOGLEG                       | trust-region  | least-squares          | bounds             |
+------------------------------+---------------+------------------------+--------------------+
| STEEPEST_DESCENT             | line-search   | least-squares, general | none               |
+------------------------------+---------------+------------------------+--------------------+
| NONLINEAR_CONJUGATE_GRADIENT | line-search   | least-squares, general | none               |
+------------------------------+---------------+------------------------+--------------------+
| LBFGS                        | line-search   | least-squares, general | none               |
+------------------------------+---------------+------------------------+--------------------+
| BFGS                         | line-search   | least-squares, general | none               |
+------------------------------+---------------+------------------------+--------------------+


Ceres least squares solver can be further tweaked thanks to the following
:class:`~openturns.ResourceMap` parameters, refer to
`nlls solver options <http://ceres-solver.org/nnls_solving.html#solver-options>`_
for more details.

+------------------------------------------------------------+-------+
| Key                                                        | Type  |
+============================================================+=======+
| minimizer_type                                             | str   |
+------------------------------------------------------------+-------+
| line_search_direction_type                                 | str   |
+------------------------------------------------------------+-------+
| line_search_type                                           | str   |
+------------------------------------------------------------+-------+
| nonlinear_conjugate_gradient_type                          | str   |
+------------------------------------------------------------+-------+
| max_lbfgs_rank                                             | int   |
+------------------------------------------------------------+-------+
| use_approximate_eigenvalue_bfgs_scaling                    | bool  |
+------------------------------------------------------------+-------+
| line_search_interpolation_type                             | str   |
+------------------------------------------------------------+-------+
| min_line_search_step_size                                  | float |
+------------------------------------------------------------+-------+
| line_search_sufficient_function_decrease                   | float |
+------------------------------------------------------------+-------+
| max_line_search_step_contraction                           | float |
+------------------------------------------------------------+-------+
| min_line_search_step_contraction                           | float |
+------------------------------------------------------------+-------+
| max_num_line_search_step_size_iterations                   | int   |
+------------------------------------------------------------+-------+
| max_num_line_search_direction_restarts                     | int   |
+------------------------------------------------------------+-------+
| line_search_sufficient_curvature_decrease                  | float |
+------------------------------------------------------------+-------+
| max_line_search_step_expansion                             | float |
+------------------------------------------------------------+-------+
| trust_region_strategy_type                                 | str   |
+------------------------------------------------------------+-------+
| dogleg_type                                                | str   |
+------------------------------------------------------------+-------+
| use_nonmonotonic_steps                                     | bool  |
+------------------------------------------------------------+-------+
| max_consecutive_nonmonotonic_steps                         | int   |
+------------------------------------------------------------+-------+
| max_num_iterations                                         | int   |
+------------------------------------------------------------+-------+
| max_solver_time_in_seconds                                 | float |
+------------------------------------------------------------+-------+
| num_threads                                                | int   |
+------------------------------------------------------------+-------+
| initial_trust_region_radius                                | float |
+------------------------------------------------------------+-------+
| max_trust_region_radius                                    | float |
+------------------------------------------------------------+-------+
| min_trust_region_radius                                    | float |
+------------------------------------------------------------+-------+
| min_relative_decrease                                      | float |
+------------------------------------------------------------+-------+
| min_lm_diagonal                                            | float |
+------------------------------------------------------------+-------+
| max_lm_diagonal                                            | float |
+------------------------------------------------------------+-------+
| max_num_consecutive_invalid_steps                          | int   |
+------------------------------------------------------------+-------+
| function_tolerance                                         | float |
+------------------------------------------------------------+-------+
| gradient_tolerance                                         | float |
+------------------------------------------------------------+-------+
| parameter_tolerance                                        | float |
+------------------------------------------------------------+-------+
| preconditioner_type                                        | str   |
+------------------------------------------------------------+-------+
| visibility_clustering_type                                 | str   |
+------------------------------------------------------------+-------+
| dense_linear_algebra_library_type                          | str   |
+------------------------------------------------------------+-------+
| sparse_linear_algebra_library_type                         | str   |
+------------------------------------------------------------+-------+
| num_linear_solver_threads                                  | int   |
+------------------------------------------------------------+-------+
| use_explicit_schur_complement                              | bool  |
+------------------------------------------------------------+-------+
| use_postordering                                           | bool  |
+------------------------------------------------------------+-------+
| dynamic_sparsity                                           | bool  |
+------------------------------------------------------------+-------+
| min_linear_solver_iterations                               | int   |
+------------------------------------------------------------+-------+
| max_linear_solver_iterations                               | int   |
+------------------------------------------------------------+-------+
| eta                                                        | float |
+------------------------------------------------------------+-------+
| jacobi_scaling                                             | bool  |
+------------------------------------------------------------+-------+
| use_inner_iterations                                       | bool  |
+------------------------------------------------------------+-------+
| inner_iteration_tolerance                                  | float |
+------------------------------------------------------------+-------+
| logging_type                                               | str   |
+------------------------------------------------------------+-------+
| minimizer_progress_to_stdout                               | bool  |
+------------------------------------------------------------+-------+
| trust_region_problem_dump_directory                        | str   |
+------------------------------------------------------------+-------+
| trust_region_problem_dump_format_type                      | str   |
+------------------------------------------------------------+-------+
| check_gradients                                            | bool  |
+------------------------------------------------------------+-------+
| gradient_check_relative_precision                          | float |
+------------------------------------------------------------+-------+
| gradient_check_numeric_derivative_relative_step_size       | float |
+------------------------------------------------------------+-------+
| update_state_every_iteration                               | bool  |
+------------------------------------------------------------+-------+


Ceres unconstrained solver can be further tweaked using the following :class:`~openturns.ResourceMap` parameters,
refer to `gradient solver options <http://ceres-solver.org/gradient_solver.html#solving>`_ for more details.

+------------------------------------------------------------+-------+
| Key                                                        | Type  |
+============================================================+=======+
| line_search_direction_type                                 | str   |
+------------------------------------------------------------+-------+
| line_search_type                                           | str   |
+------------------------------------------------------------+-------+
| nonlinear_conjugate_gradient_type                          | str   |
+------------------------------------------------------------+-------+
| max_lbfgs_rank                                             | int   |
+------------------------------------------------------------+-------+
| use_approximate_eigenvalue_bfgs_scaling                    | bool  |
+------------------------------------------------------------+-------+
| line_search_interpolation_type                             | str   |
+------------------------------------------------------------+-------+
| min_line_search_step_size                                  | float |
+------------------------------------------------------------+-------+
| line_search_sufficient_function_decrease                   | float |
+------------------------------------------------------------+-------+
| max_line_search_step_contraction                           | float |
+------------------------------------------------------------+-------+
| min_line_search_step_contraction                           | float |
+------------------------------------------------------------+-------+
| max_num_line_search_step_size_iterations                   | int   |
+------------------------------------------------------------+-------+
| max_num_line_search_direction_restarts                     | int   |
+------------------------------------------------------------+-------+
| line_search_sufficient_curvature_decrease                  | float |
+------------------------------------------------------------+-------+
| max_line_search_step_expansion                             | float |
+------------------------------------------------------------+-------+
| max_num_iterations                                         | int   |
+------------------------------------------------------------+-------+
| max_solver_time_in_seconds                                 | float |
+------------------------------------------------------------+-------+
| function_tolerance                                         | float |
+------------------------------------------------------------+-------+
| gradient_tolerance                                         | float |
+------------------------------------------------------------+-------+
| parameter_tolerance                                        | float |
+------------------------------------------------------------+-------+
| logging_type                                               | str   |
+------------------------------------------------------------+-------+
| minimizer_progress_to_stdout                               | bool  |
+------------------------------------------------------------+-------+

See also
--------
AbdoRackwitz, Cobyla, CMinpack, NLopt, SQP, TNC

Examples
--------
List available algorithms:

>>> import openturns as ot
>>> print(ot.Ceres.GetAlgorithmNames())
[LEVENBERG_MARQUARDT,DOGLEG,...

Solve a least-squares problem:

>>> dim = 2
>>> residualFunction = ot.SymbolicFunction(['x0', 'x1'], ['10*(x1-x0^2)', '1-x0'])
>>> problem = ot.LeastSquaresProblem(residualFunction)
>>> problem.setBounds(ot.Interval([-3.0] * dim, [5.0] * dim))
>>> algo = ot.Ceres(problem, 'LEVENBERG_MARQUARDT')
>>> algo.setStartingPoint([0.0] * dim)
>>> algo.run()
>>> result = algo.getResult()
>>> x_star = result.getOptimalPoint()
>>> y_star = result.getOptimalValue()

Or, solve a general optimization problem:

>>> dim = 4
>>> linear = ot.SymbolicFunction(['x1', 'x2', 'x3', 'x4'], ['(x1-1)^2+(x2-2)^2+(x3-3)^2+(x4-4)^2'])
>>> problem = ot.OptimizationProblem(linear)
>>> algo = ot.Ceres(problem, 'BFGS')
>>> algo.setStartingPoint([0.0] * 4)
>>> algo.run()
>>> result = algo.getResult()
>>> x_star = result.getOptimalPoint()
>>> y_star = result.getOptimalValue()"

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::setAlgorithmName
"Accessor to the algorithm name.

Parameters
----------
algoName : str
    The identifier of the algorithm."

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getAlgorithmName
"Accessor to the algorithm name.

Returns
-------
algoName : str
    The identifier of the algorithm."

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::GetAlgorithmNames
"Accessor to the list of algorithms provided, by names.

Returns
-------
names : :class:`~openturns.Description`
    List of algorithm names provided, according to its naming convention.

    The trust region methods are not able to solve general optimization
    problems, in that case a warning is printed and the default line search
    method is used instead.

Examples
--------
>>> import openturns as ot
>>> print(ot.Ceres.GetAlgorithmNames())
[LEVENBERG_MARQUARDT,DOGLEG,STEEPEST_DESCENT,NONLINEAR_CONJUGATE_GRADIENT,LBFGS,BFGS]"

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::IsAvailable
"Ask whether Ceres support is available.

Returns
-------
available : bool
    Whether Ceres support is available."

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::setOptionAsString
"Accessor to string options. Sets an option defined by a key and its value.

Parameters
----------
key : str
    The name of the option to set.
    
value : str
    The value of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOptionAsString
"Accessor to string options. Retrieves the value of an option from its name.

Parameters
----------
key : str
    The name of the option to get.
    
Returns
-------
optionValue : str
    The value of the specified option."

    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::setOptionAsScalar
"Accessor to scalar options. Sets an option defined by a key and its value.

Parameters
----------
key : str
    The name of the option to set.
    
value : float
    The value of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOptionAsScalar
"Accessor to scalar options. Retrieves the value of an option from its name.

Parameters
----------
key : str
    The name of the option to get.
    
Returns
-------
optionValue : float
    The value of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::setOptionAsUnsignedInteger
"Accessor to integer options. Sets an option defined by a key and its value.

Parameters
----------
key : str
    The name of the option to set.
    
value : int
    The value of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOptionAsUnsignedInteger
"Accessor to integer options. Retrieves the value of an option from its name.

Parameters
----------
key : str
    The name of the option to get.
    
Returns
-------
optionValue : int
    The value of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOptions
"Accessor to the list of user-specified option names.

Returns
-------
optionNames : :class:`~openturns.Description`
    The list of the options defined by the user."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::hasOption
"Checks if a specific option is already defined.

Parameters
----------
key : str
    The name of the option to look for.

Returns
-------
defined : bool
    Returns True if the specified option is already defined by the user."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOptionType
"Accessor to the type of an option.

Parameters
----------
key : str
    The name of the option to check.

Returns
-------
type : str
    The type of the specified option."
    
// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::getOption
"Accessor to any option, as a string.

Parameters
----------
key : str
    The name of the option to retrieve.

Returns
-------
value : str
    The value of the specified option, as a string."

// ---------------------------------------------------------------------

%feature("docstring") OT::Ceres::removeOption
"Removes a user-defined option. In this case, Ceres will use default value.

Parameters
----------
key : str
    The name of the option to remove."

// ---------------------------------------------------------------------


