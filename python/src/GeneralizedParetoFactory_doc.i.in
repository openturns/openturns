%feature("docstring") OT::GeneralizedParetoFactory
"Generalized Pareto factory.

See also
--------
DistributionFactory, GeneralizedPareto

Notes
-----
Several estimators are available to build a :class:`~openturns.GeneralizedPareto` distribution
from a scalar sample (see [matthys2003]_ for the theory).

The chosen algorithm depends on the size of the sample compared to the
:class:`~openturns.ResourceMap` key `GeneralizedParetoFactory-SmallSize`:

- When the size of the sample is small the probability weighted method of moments is used,
  with a fallback on the exponential regression method
- When the size of the sample is large the exponential regression method is used,
  with a fallback on the probability weighted moment method

**Moments based estimator:**

Lets denote:

- :math:`\displaystyle \overline{x}_n = \frac{1}{n} \sum_{i=1}^n x_i` the empirical
  mean of the sample, 
- :math:`\displaystyle s_n^2 = \frac{1}{n-1} \sum_{i=1}^n (x_i - \overline{x}_n)^2`
  its empirical variance.

Then we estimate :math:`(\hat{\sigma}_n, \hat{\xi}_n, \hat{u}_n)` using:

.. math::
    :nowrap:
    :label: gpd_moment_estimator

    \begin{eqnarray*}
        \hat{u}_n &= x_{(1)} - \frac{x_{(1)}}{2 + n} \\
        \hat{\xi}_n &= -\dfrac{1}{2}\left(\dfrac{(\overline{x}_n - \hat{u}_n)^2}{s_n^2}-1\right) \\
        \hat{\sigma}_n &= \dfrac{(\overline{x}_n- \hat{u}_n)}{2}\left(\dfrac{(\overline{x}_n- \hat{u}_n)^2}{s_n^2}+1\right)
    \end{eqnarray*}

This estimator is well-defined only if :math:`\hat{\xi}>-1/4`, otherwise the second moment does not exist.

**Probability weighted moments based estimator:**

Lets denote:

- :math:`\left(x_{(i)}\right)_{i\in\{1,\dots,n\}}` the sample sorted in ascending order
- :math:`m=\dfrac{1}{n}\sum_{i=1}^n\left(1-\dfrac{i-7/20}{n}\right)x_{(i)}`
- :math:`\rho=\dfrac{m}{\overline{x}_n}`

Then we estimate :math:`(\hat{\sigma}, \hat{\xi}, \hat{u})` using:

.. math::
    :nowrap:
    :label: gpd_probability_weighted_moment_estimator

    \begin{eqnarray*}
        \hat{u}_n &= x_{(1)} - \frac{x_{(1)}}{2 + n}\\
        \hat{\xi}_n &= \dfrac{1-4\rho}{1-2\rho} \\
        \hat{\sigma}_n &= \dfrac{2(\overline{x}_n- \hat{u}_n)}{1-2\rho}
    \end{eqnarray*}

This estimator is well-defined only if :math:`\hat{\xi}_n>-1/2`, otherwise the first moment does not exist.


**Maximum likelihood based estimator:**

These estimators are not yet implemented.

For a given :math:`u < x_{(1,n)}`, we get :math:`(\hat{\sigma}_n(u),  \hat{\xi}_n(u)` by maximizing the likelihood of the sample :math:`\ell(\sigma(u),  \xi(u),u)`:

.. math::

    (\hat{\sigma}_n(u), \hat{\xi}_n(u)) = \argmax_{\sigma, \xi}   \ell(\sigma(u), \xi(u)|  x_1, \dots, x_n, u) 

The threshold :math:`u` is obtained by maximizing the optimal likelihood :math:`\ell(\hat{\sigma}_n(u),  \hat{\xi}_n(u), u)`

.. math::
    
    \hat{u}_n = \argmax_{u} \ell(\hat{\sigma}_n(u),  \hat{\xi}_n(u),u) \text{ under the constraint } u < x_{(1,n)}


The initial point of the optimisation problem is :math:`u_0 = x_{(1,n)} - |x_{(1,n)}|/(2+n)`.


**Exponential regression based estimator:**

Lets denote:

- :math:`y_{i}=i\log\left(\dfrac{x_{(n-i)}-x_{(1)}}{x_{(n-i-1)}-x_{(1)}}\right)` for :math:`i\in\{1,n-3\}`

Then we estimate :math:`(\hat{\sigma}, \hat{\xi}, \hat{u})`
using:

.. math::
    :label: gpd_exponential_estimator

    \hat{\xi} &= \xi^* \\
    \hat{\sigma} &= \dfrac{2(\overline{x}_n- \hat{u}_n)}{1-2\rho} \\
    \hat{u} &= x_{(1)} - \frac{x_{(1)}}{2 + n}

Where :math:`\xi^*` maximizes:

.. math::
    :label: gpd_xi_relation
    
    \sum_{i=1}^{n-2}\log\left(\dfrac{1-(j/n)^{\xi}}{\xi}\right)-\dfrac{1-(j/n)^{\xi}}{\xi}y_i

under the constraint :math:`-1 \leq \xi \leq 1`.

The following :class:`~openturns.ResourceMap` entries can be used to tweak
the parameters of the optimization solver involved in the different estimators:

- `GeneralizedParetoFactory-DefaultOptimizationAlgorithm`
- `GeneralizedParetoFactory-MaximumEvaluationNumber`
- `GeneralizedParetoFactory-MaximumAbsoluteError`
- `GeneralizedParetoFactory-MaximumRelativeError`
- `GeneralizedParetoFactory-MaximumObjectiveError`
- `GeneralizedParetoFactory-MaximumConstraintError`
"

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::setOptimizationAlgorithm
"Accessor to the solver.

Parameters
----------
solver : :class:`~openturns.OptimizationAlgorithm`
    The solver used for numerical optimization of the likelihood."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::getOptimizationAlgorithm
"Accessor to the solver.

Returns
-------
solver : :class:`~openturns.OptimizationAlgorithm`
    The solver used for numerical optimization of the likelihood."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::build
"Build the distribution.

**Available usages**:

    build()

    build(*sample*)

    build(*param*)

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated.
param : sequence of float
   The parameters of the :class:`~openturns.GeneralizedPareto`.

Returns
-------
dist : :class:`~openturns.Distribution`
    The built distribution.

Notes
-----
In the first usage, the default :class:`~openturns.GeneralizedPareto` distribution is built.

In the second usage, the parameters are evaluated according the following strategy:

- If the sample size is less or equal to `GeneralizedParetoFactory-SmallSize` from :class:`~openturns.ResourceMap`, then the method of probability weighted moments is used. If it fails, the method of exponential regression is used.
- Otherwise, the first method tried is the method of exponential regression, then the method of probability weighted moments if the first one fails.

In the third usage, a :class:`~openturns.GeneralizedPareto` distribution corresponding to the given parameters is built."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildAsGeneralizedPareto
"Build the distribution as a GeneralizedPareto type.

**Available usages**:

    build()

    build(*sample*)

    build(*param*)

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated.
param : sequence of float,
    A vector of parameters of the :class:`~openturns.GeneralizedPareto`.

Returns
-------
dist : :class:`~openturns.GeneralizedPareto`
    The estimated distribution as a GeneralizedPareto.
    
    In the first usage, the default GeneralizedPareto distribution is built."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfExponentialRegression
"Build the distribution based on the exponential regression estimator.

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfProbabilityWeightedMoments
"Build the distribution based on the probability weighted moments estimator.

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfMoments
"Build the distribution based on the method of moments estimator.

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::drawMeanResidualLife
"Draw the mean residual life plot.

Let :math:`X` a random variable defined so the excess of a threshold :math:`u_s`
follow a Generalized Pareto distribution :math:`GPD(\xi, \sigma_s)`.
The mean of excesses of :math:`X` for :math:`u>u_s` is

.. math::

    M_n(u) = \Expect{X-u|X>u} = \frac{\sigma_s+\xi_u}{1-\xi}

So for all :math:`u>u_s` :math:`M_n(u)` is linear wrt. :math:`u`.
The threshold :math:`u_s` is the smallest value of :math:`u` for which the curve is linear.

The quantity :math:`M_n(u)` is estimated by the empirical estimator of the mean:

.. math::

    m_n(u) = \frac{1}{n} \sum_{i=1}^n (X_i - u) 1_{X_i \ge u} = \frac{1}{n} \sum_{i=1}^n X_i 1_{X_i \ge u} - u

The quantity :math:`M_n(u)` is asymptotically Gaussian with mean :math:`m_n(u)`
and variance :math:`m_n(u) (1 - m_n(u))/n`

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated.

Returns
-------
graph : :class:`~openturns.Graph`
    The graph of :math:`m_n(u)` and its confidence interval.
    
Notes
-----
The confidence level can be set using the :class:`~openturns.ResourceMap` key
`GeneralizedParetoFactory-MeanResidualLifeConfidenceLevel`
The number of threshold points in the graph can be set with the key
`GeneralizedParetoFactory-MeanResidualLifePointNumber`.
"

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfLikelihoodMaximization
"Estimate the distribution with the maximum likelihood method.

Let :math:`u` a given threshold, we define the excesses values

.. math::

    z_i = x_i - u, for all :math:`1 \leq i \leq n` such as z_i > 0

The estimator of :math:`(\sigma, \xi)` maximizes  the log-likelihood defined as:

If :math:`\xi \neq 0`, then:

.. math::
    :label: llgpdR1

    \ell(\sigma, \xi) = -n \log \sigma - \sum_{i=1}^n  \log \left(1 + \xi \frac{z_i}{\sigma}\right)

defined on :math:`(\sigma, \xi)` such that :math:`1+\xi \left( \frac{z_i - u}{\sigma} \right) > 0` for all :math:`1 \leq i \leq n`.

If :math:`\xi = 0`, then:

.. math::
    :label: llgpdR2

    \ell(\sigma, \xi) = -n \log \sigma - \sigma^{-1} \sum_{i=1}^n \exp z_i

Parameters
----------
sample : 2-d sequence of float
    Block maxima grouped in a sample of size :math:`n` and dimension :math:`R`.
u : float
    Given threshold value

Returns
-------
distribution : :class:`~openturns.GeneralizedExtremeValue`
    The estimated distribution."

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfLikelihoodMaximizationEstimator
"Estimate the distribution and the parameter distribution with the maximum likelihood method.

The estimators are defined using the profile log-likelihood  as detailed in
:meth:`buildMethodOfLikelihoodMaximization`.

The result class produced by the method provides:

- the GPD distribution associated to :math:`(\hat{\sigma}, \hat{\xi}, u)`,
- the asymptotic distribution of :math:`(\hat{\sigma}, \hat{\xi}, u)`.

Parameters
----------
sample : 2-d sequence of float
    Sample
u : float
    Given threshold value

Returns
-------
result : :class:`~openturns.DistributionFactoryLikelihoodResult`
    The result class."

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfXiProfileLikelihood
"Estimate the distribution with the profile likelihood.


The estimator :math:`(\hat{\mu}, \hat{\sigma}, \hat{\xi})` is defined using a nested numerical optimization of the log-likelihood:

.. math::

    \ell_p (\xi) = \max_{(\sigma)} \ell (\sigma, \xi, u)

where :math:`\ell (\sigma, \xi, u)` is detailed in equations :eq:`llgpdR1` and :eq:`llgpdR2`.

The estimator is given by:

.. math::
    :nowrap:

    \begin{align*}
    \hat{\xi} & =  \argmax_{\xi} \ell_p(\xi)\\
    \hat{\sigma} & = \argmax_{\sigma} \ell(\sigma, \hat{\xi}, u)
    \end{align*}

Parameters
----------
sample : 2-d sequence of float
    The block maxima sample of dimension 1.
u : float
    Given threshold value

Returns
-------
distribution : :class:`~openturns.GeneralizedPareto`
    The estimated distribution.
"

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildMethodOfXiProfileLikelihoodEstimator
"Estimate the distribution and the parameter distribution with the profile likelihood.


The estimators are defined in :meth:`buildMethodOfXiProfileLikelihood`.

The result class produced by the method provides:

- the GPD distribution associated to :math:`(\hat{\sigma}, \hat{\xi}, u)`,
- the asymptotic distribution of :math:`(\hat{\sigma}, \hat{\xi}, u)`,
- the profile log-likelihood function :math:`\xi \mapsto \ell_p(\xi)`,
- the optimal profile log-likelihood value :math:`\ell_p(\hat{\xi})`,
- confidence intervals of level :math:`(1-\alpha)` of :math:`\xi`.

Parameters
----------
sample : 2-d sequence of float
    The block maxima sample of dimension 1.
u : float
    Given threshold value

Returns
-------
result : :class:`~openturns.ProfileLikelihoodResult`
    The result class."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::drawParameterThresholdStability
"Draw the parameter threshold stability.

This method is complementary to :meth:`drawMeanResidualLife` as a method of threshold
selection by fitting the GPD over a range of thresholds and seeks to look stability of
parameters estimates.

Let :math:`X` a random variable defined so the excess of a threshold :math:`u_s`
follow a Generalized Pareto distribution :math:`GPD(\xi, \sigma_s)`.

Then the excesses of :math:`X`above :math:`u>u_s`, ie the distribution :math:`X-u|X>u`
also follow a GPD :math:`GPD(\xi, \sigma_u)` where:

.. math::

    \sigma_u = \sigma_s + \xi (u - u_s)

We reparametrize the scale parameter with a modified standard deviation that does not depend on :math:`u`:

.. math::

    \sigma_u^{\ast} = \sigma_u - \xi u

This means estimates of :math:`(\xi, \sigma_u)` should be constant
(or stable accounting for sampling variability) for valid thresholds above :math:`u>u_s`.

The methodology suggested here is to plot :math:`\hat{\sigma_u}^{\ast}` and :math:`\hat{\xi}` (and their confidence intervals) against :math:`u` and retain the lowest value of u for which
the estimates remain near-constant.

Parameters
----------
sample : 2-d sequence of float, of dimension 1
    The sample from which the distribution parameters are estimated.
uRange : :class:`~openturns.Interval`
    The range of the threshold :math:`u`.

Returns
-------
graph : :class:`~openturns.Graph`
    The graphs of :math:`\hat{\sigma_u}^{\ast}` and :math:`\hat{\xi}` versus :math:`u` and their confidence interval.

Notes
-----
The confidence level can be set using the :class:`~openturns.ResourceMap` key
`GeneralizedParetoFactory-ThresholdStabilityConfidenceLevel`
The number of threshold points in the graph can be set with the key
`GeneralizedParetoFactory-ThresholdStabilityPointNumber`.
"

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildReturnLevelEstimator
"Estimate a return level and its distribution from the GPD parameters.

The :math:`m`-return level :math:`x_m` is the level exceeded on average once every :math:`m` blocks.
The parameter :math:`m` is referred to as the *return period*.
For example, if the GEV distribution is the distribution of the annual maxima,
then :math:`x_{100}` is the 100-year return period and is exceeded on average once in every century.

The :math:`m`-return level is defined as the quantile of order :math:`1-p=1-1/m` of the GEV distribution.


If :math:`\xi \neq 0`:

.. math::
    :label: xm1

    x_m = u + \frac{\sigma}{\xi}\left[(m \zeta_u)^{\xi} - 1 \right]

If :math:`\xi = 0`:

.. math::
    :label: xm2

    x_m = u + \sigma \log(m \zeta_u)

with :math:`zeta_u` the ratio of samples exceeding the threshold :math:`u`.

The estimator :math:`\hat{x}_m` of :math:`x_m` is deduced from the estimator
:math:`(\hat{\sigma}, \hat{\xi}, \hat{\zeta_u})` of :math:`(\sigma, \xi, \zeta_u)`.

The asymptotic distribution of :math:`\hat{x_m}` is obtained by the Delta method from the asymptotic distribution of
:math:`(\hat{\sigma}, \hat{\xi}, \hat{\zeta_u})`. It is a normal distribution with mean :math:`\hat{x}_m` and variance:

.. math::

    \Var{z_m} = (\nabla x_m)^T \mat{V}_n \nabla x_m

where :math:`\nabla x_m = (\frac{\partial x_m}{\partial \mu}, \frac{\partial x_m}{\partial \sigma}, \frac{\partial x_m}{\partial \xi})`
and :math:`\mat{V}_n` is the asymptotic covariance of :math:`(\hat{\sigma}, \hat{\xi}, \hat{\mu})`.

Parameters
----------
result : :class:`~openturns.DistributionFactoryResult`
    Likelihood estimation result of a :class:`~openturns.GeneralizedPareto`
m : float
    The return period expressed in terms of number of blocks.
sample : 2-d sequence of float
    The same sample used for the likelihood estimation (to compute :math:`\zeta_u`).

Returns
-------
distribution : :class:`~openturns.Distribution`
    The asymptotic distribution of :math:`\hat{x}_m`."


// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildReturnLevelProfileLikelihoodEstimator
"Estimate :math:`(z_m, \xi)` and its distribution with the profile likelihood.

The estimators are defined in :meth:`buildReturnLevelProfileLikelihood`.

The parameter estimates are given by:

.. math::
    :nowrap:

    \begin{align*}
    \hat{z}_m = \argmax_{z_m} \ell_p(z_m)\\
    \hat{\xi} = \argmax_{(\xi)} \ell(\hat{z}_m, \xi)
    \end{align*}

The result class produced by the method provides:

- the GPD distribution associated to :math:`(\hat{z}_m, \hat{\xi}, u)`,
- the asymptotic distribution of :math:`(\hat{z}_m, \hat{\xi}, u)`,
- the profile log-likelihood function :math:`z_m \mapsto \ell_p(z_m)`,
- the optimal profile log-likelihood value :math:`\ell_p(\hat{z}_m)`,
- confidence intervals of level :math:`(1-\alpha)` of :math:`\hat{z}_m`.

Parameters
----------
sample : 2-d sequence of float
    A sample of dimension 1.
m : float
    The return period, defines the level of the quantile as :math:`1-1/m`.
u : float
    The location parameter

Returns
-------
result : :class:`~openturns.ProfileLikelihoodResult`
    The result class."

// ----------------------------------------------------------------------------

%feature("docstring") OT::GeneralizedParetoFactory::buildReturnLevelProfileLikelihood
"Estimate a return level and its distribution with the profile likelihood.

The estimator is defined using a nested numerical optimization of the log-likelihood:

.. math::

    \ell_p (z_m) = \max_{(\xi)} \ell (z_m, \xi, u)

where :math:`\ell (z_m, \xi, u)` is the log-likelihood detailed in :eq:`llR1` and :eq:`llR2` where we substitued
:math:`\sigma` for :math:`z_m` using equations :eq:`xm1` or :eq:`xm2`.

The estimator :math:`\hat{z}_m` of :math:`z_m` is defined by:

.. math::

    \hat{z}_m = \argmax_{z_m} \ell_p(z_m)

The asymptotic distribution of :math:`\hat{z}_m` is normal.

Parameters
----------
sample : 2-d sequence of float
    A sample of dimension 1.
u : float
    The location parameter

Returns
-------
distribution : :class:`~openturns.Normal`
    The asymptotic distribution of :math:`\hat{z}_m`.

Notes
-----
The starting point of the optimization is initialized from the regular maximum likelihood method."
