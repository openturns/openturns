%define OT_Domain_doc
"Base class for domain objects.

Notes
-----
A Domain object can be created through its derived classes:

- :class:`~openturns.Interval`

- :class:`~openturns.MeshDomain`

- :class:`~openturns.LevelSet`

- :class:`~openturns.DomainUnion`

- :class:`~openturns.DomainDisjunctiveUnion`

- :class:`~openturns.DomainIntersection`

- :class:`~openturns.DomainComplement`

- :class:`~openturns.DomainDifference`"

%enddef
%feature("docstring") OT::DomainImplementation
OT_Domain_doc

// ---------------------------------------------------------------------

%define OT_Domain_contains_doc
"Check if the given point is inside of the domain.

Parameters
----------
point or sample : sequence of float or 2-d sequence of float
    Point or Sample with the same dimension as the current domain's dimension.

Returns
-------
isInside : bool or sequence of bool
    Flag telling whether the given point is inside of the domain."
%enddef
%feature("docstring") OT::DomainImplementation::contains
OT_Domain_contains_doc

// ---------------------------------------------------------------------

%define OT_Domain_computeDistance_doc
"Compute the Euclidean distance of a given point to the domain.

Parameters
----------
point or sample : sequence of float or 2-d sequence of float
    Point or Sample with the same dimension as the current domain's dimension.

Returns
-------
distance : float or Sample
    Euclidean distance of the point to the domain."
%enddef
%feature("docstring") OT::DomainImplementation::computeDistance
OT_Domain_computeDistance_doc

// ---------------------------------------------------------------------

%define OT_Domain_getDimension_doc
"Get the dimension of the domain.

Returns
-------
dim : int
    Dimension of the domain."
%enddef
%feature("docstring") OT::DomainImplementation::getDimension
OT_Domain_getDimension_doc

// ---------------------------------------------------------------------

%define OT_Domain_draw_doc
"Draw the 2D projections of the sample, colored according to the membership of each point in the domain.
The projections grid is return as a :class:`~openturns.GridLayout`.

Parameters
----------
sample : N-d sequence of floats
    Sample with the same dimension as the current domain.
inColor : str
    Color used to draw points belonging to the domain.
outColor : str
    Color used to draw points not belonging to the domain.

Notes
-----
Draws the 2D projections of the sample onto all coordinate pairs in the domain space.
Each sample is drawn as a small square colored with the color *inColor*
if it belongs to the domain and with the color *outColor* otherwise.

The limits of the graphs are those of the sample.

Examples
--------
>>> import openturns as ot
>>> from openturns.viewer import View
>>> domain = ot.Interval([-2.0, 1.0, -1], [2., 3., 1.])
>>> U = ot.Uniform(-3, 4)
>>> dist = ot.JointDistribution([U, U, U])
>>> sample = dist.getSample(200)
>>> grid = domain.draw(sample)
>>> View(grid).show()"
%enddef
%feature("docstring") OT::DomainImplementation::draw
OT_Domain_draw_doc

// ---------------------------------------------------------------------
