%feature("docstring") OT::DesignProxy
"Design matrix cache.

Helps to cache evaluations of the design matrix.

Can be useful for an iterative least squares problem resolution.

Parameters
----------
x : :class:`~openturns.Sample`
    Input sample
psi : :class:`~openturns.Basis`
    Functional basis"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::getInputSample
"Input sample accessor.

Returns
-------
inputSample : :class:`~openturns.Sample`
    Input sample."

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::getBasis
"Accessor to the basis.

Returns
-------
basis : :class:`~openturns.getBasis`
    Basis."

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::computeDesign
"Build the design matrix.

Parameters
----------
indices : sequence of int
    Indices of the current basis in the global basis

Returns
-------
psiAk : :class:`~openturns.Matrix`
    The design matrix"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::getRowFilter
"Row filter accessor.

Returns
-------
rowFilter : :class:`~openturns.Indices`
    Sub-indices in of the sample in the current indices"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::getSampleSize
"Sample size accessor.

Returns
-------
sampleSize : int
    Size of sample accounting for row filter"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::setRowFilter
"Row filter accessor.

Parameters
----------
rowFilter : sequence of int
    Sub-indices in of the sample in the current indices"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::hasRowFilter
"Row filter flag accessor.

Returns
-------
hasRowFilter : bool
    Whether sub-indices of the basis are set"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::setWeight
"Accessor to the weights.

Parameters
----------
weight : sequence of float
    Weights on each basis term"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::getWeight
"Accessor to the weights.

Returns
-------
weight : :class:`~openturns.Point`
    Weights on each basis term"

// ---------------------------------------------------------------------

%feature("docstring") OT::DesignProxy::hasWeight
"Weight flag accessor.

Returns
-------
hasWeight : bool
    Whether weights are set"
