%feature("docstring") OT::RandomVectorMetropolisHastings
"Simple Metropolis-Hastings sampler defined from a random variable.

Refer to :ref:`bayesian_calibration`, :ref:`metropolis_hastings`.

Parameters
----------
source : :class:`~openturns.RandomVector`
    Source term
initialState : sequence of float
    Initial state of the chain
marginalIndices : sequence of int, optional
    Indices of the components to be updated.
    If not specified, all components are updated.
    The number of updated components must be equal to the dimension of *proposal*.
sourceLinkFunction : :class:`~openturns.Function`, optional
    Link between the state of the chain and the parameters of *source*

Notes
-----
The random walk Metropolis-Hastings algorithm is
a Markov Chain Monte-Carlo algorithm.
It draws candidates for the next state of the chain following direct
realizations of the *source* random variable.

Examples
--------
>>> import openturns as ot
>>> import math as m
>>> ot.RandomGenerator.SetSeed(0)

Sample from a random variable:

>>> source = ot.RandomVector(ot.Normal())
>>> initialState = [3.0]
>>> sampler = ot.RandomVectorMetropolisHastings(source, initialState)
>>> sampler.setBurnIn(20)
>>> sampler.setThinning(2)
>>> x = sampler.getSample(10)

We can also link the parameters of the random vector to the state of the chain,
here the parameters of the random vector being the ones of the underlying distribution:

>>> slf = ot.SymbolicFunction(['x'], ['0.0', '0.1'])
>>> sampler = ot.RandomVectorMetropolisHastings(source, initialState, [0], slf)"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomVectorMetropolisHastings::getSource
"Get the proposal distribution.

Returns
-------
source : :class:`~openturns.RandomVector`
    The distribution from which the transition kernels of the random walk
    Metropolis-Hastings algorithm is defined"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomVectorMetropolisHastings::setSource
"Set the proposal distribution.

Parameters
----------
proposal : :class:`~openturns.RandomVector`
    The distribution from which the transition kernels of the random walk
    Metropolis-Hastings algorithm is defined"
