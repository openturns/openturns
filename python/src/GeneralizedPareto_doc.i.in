%feature("docstring") OT::GeneralizedPareto
"Generalized Pareto distribution.

Available constructors:
    GeneralizedPareto(*sigma=1.0, xi=0.0, u=0.0*)

    GeneralizedPareto(*pareto*)

Parameters
----------
sigma : float, :math:`\sigma > 0`
    Scale parameter :math:`\sigma`.
xi : float
    Shape parameter :math:`\xi`.
u : float
    Location parameter :math:`u`.
pareto : :class:`~openturns.Pareto`
    Pareto distribution.

Notes
-----
Its cumulative and probability distribution functions are defined as:

.. math::
    :nowrap:

    \begin{eqnarray*}
        F_X(x) &  = & 1-t(x), \quad \forall x \in \cS \\
        p_X(x) & = & -t'(x), \quad \forall x \in \cS
    \end{eqnarray*}

where 

.. math::
    :nowrap:

    \begin{eqnarray*}
        t(x) &  = & \left(1+\xi \dfrac{x-\mu}{\sigma}\right)^{-1/\xi} \quad \text{ if } \xi \neq 0\\
        t(x) &  = & \exp(-\dfrac{x-u}{\sigma}) \quad \text{ if } \xi= 0
    \end{eqnarray*}

and 

.. math::
    :nowrap:

    \begin{eqnarray*}
        \cS &  = &  [u, +\infty) \quad \text{ if } \xi \geq 0\\
            &  = &  [u, u-\sigma/\xi] \quad \text{ if } \xi < 0
    \end{eqnarray*}

with :math:`\sigma > 0` and :math:`\xi \in \Rset`.

Its first moments are:

.. math::
    :nowrap:

    \begin{eqnarray*}
        \Expect{X} & = & u + \frac{\sigma}{1 - \xi}
                         \quad \text{ if } \xi < 1 \\
        \Var{X} & = & \frac{\sigma^2}{(1 - 2 \xi) (1 - \xi)^2}
                      \quad \text{ if } \xi < \frac{1}{2}
    \end{eqnarray*}



When the constructor from a :class:`~openturns.Pareto`:math:`(\beta, \alpha, \gamma)` distribution is used,  then it creates :class:`~openturns.GeneralizedPareto`:math:`(\sigma, \xi, u)` where:

.. math::
    :nowrap:

    \begin{eqnarray*}
       u & = & \gamma + \beta \\
       \sigma & = & \dfrac{\beta}{\alpha} \\
       \xi & = & \dfrac{1}{\alpha}
    \end{eqnarray*}


Examples
--------
Create a distribution:

>>> import openturns as ot
>>> dist1 = ot.GeneralizedPareto(1.0, 0.0, 0.0)

Create it from a Pareto distribution:

>>> myPareto = Pareto(1.0, 2.0, 3.0)
>>> dist1 = ot.GeneralizedPareto(myPareto)

Draw a sample:

>>> sample = dist1.getSample(5)"

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::getSigma
"Accessor to the distribution's scale parameter :math:`\sigma`.

Returns
-------
sigma : float
    Scale parameter :math:`\sigma`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::getXi
"Accessor to the distribution's shape parameter :math:`\xi`.

Returns
-------
xi : float
    Shape parameter :math:`\xi`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::setSigma
"Accessor to the distribution's scale parameter :math:`\sigma`.

Parameters
----------
sigma : float, :math:`\sigma > 0`
    Scale parameter :math:`\sigma`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::setXi
"Accessor to the distribution's shape parameter :math:`\xi`.

Parameters
----------
xi : float, :math:`\xi \in \Rset`
    Shape parameter :math:`\xi`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::setU
"Accessor to the distribution's location parameter :math:`u`.

Parameters
----------
u : float, :math:`u \in \Rset`
    Location parameter :math:`u`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::getU
"Accessor to the distribution's location parameter :math:`u`.

Returns
-------
u : float
    Location parameter :math:`u`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::getLocation
"Accessor to the distribution's location parameter :math:`u`.

Returns
-------
u : float
    Location parameter :math:`u`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GeneralizedPareto::asPareto
"Pareto distribution conversion.

Returns
-------
pareto : :class:`~openturns.Pareto`
    Pareto distribution.

Notes
-----
The Pareto associated to the :class:`~openturns.GeneralizedPareto`:math:`(\sigma, \xi, u)` is a  :class:`~openturns.Pareto`:math:`(\beta, \alpha, \gamma)` such that: 

.. math::
    :nowrap:

    \begin{eqnarray*}
       \beta & = & \dfrac{\sigma}{\xi} \\
       \alpha & = & \dfrac{1}{\xi} \\
       \gamma & = & u-\dfrac{\sigma}{\xi}
    \end{eqnarray*}

"
