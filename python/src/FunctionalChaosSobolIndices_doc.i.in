%feature("docstring") OT::FunctionalChaosSobolIndices
"Sensitivity analysis based on functional chaos expansion.

Parameters
----------
result : :class:`~openturns.FunctionalChaosResult`
    A functional chaos result resulting from a polynomial chaos decomposition.

See also
--------
FunctionalChaosAlgorithm, FunctionalChaosResult

Notes
-----
This structure is created from a :class:`~openturns.FunctionalChaosResult` in order to evaluate the
Sobol' indices associated to the polynomial chaos decomposition of the model. 
The :meth:`~openturns.SobolIndicesAlgorithm.DrawSobolIndices` static method can be used to 
draw the indices.

This class provides methods to estimate the Sobol' indices which
are presented in :ref:`sensitivity_sobol`.
These indices can be easily computed from the polynomial chaos expansion: 
these algorithm is documented for each of the methods presented below.

In this help page, we use the following notations.
Let :math:`d` be the dimension of the input random vector.
Let :math:`P \in \Nset` be the number of coefficients in the functional 
basis.
Let :math:`\mathcal{J}_P \subseteq \Nset^d` the set of multi-indices up
to the index :math:`P`.
Depending on the way the coefficients are computed, the set of multi-indices
is the consequence of the choice of the polynomial degree, the enumeration rule,
and, if necessary, the selection method (e.g. the LARS selection method).
Let :math:`\tilde{h}(\bdZ)` be the polynomial chaos expansion:

.. math::
    \tilde{h}(\bdZ)
    &= \sum_{\idx \in \mathcal{J}_P} a_\idx \psi_\idx(\bdZ)

where :math:`\bdZ` is the standardized input random vector,
:math:`\{a_\idx\}_{\idx \in \mathcal{J}_P}` are the coefficients
and :math:`\{\psi_\idx\}_{\idx \in \mathcal{J}_P}` are the functions in the
functional basis.

The variance of the polynomial chaos expansion is:

.. math::
    \Var{\tilde{h}(\bdZ)} = \sum_{\idx \in \mathcal{J}_P} a_\idx^2 \|\psi_\idx\|^2.

In the previous expression, let us emphasise that the variance is a sum 
of squares, excepted the :math:`a_0` coefficient. 
If the polynomial basis is orthonormal, the expression is particularly 
simple:

.. math::
    \Var{\tilde{h}(\bdZ)} = \sum_{\idx \in \mathcal{J}_P} a_\idx^2.

The part of variance of the multi-index :math:`\idx` is:

.. math::
    \operatorname{PoV}_\idx
    = \frac{a_\idx^2 \|\psi_\idx\|^2}{\Var{\tilde{h}(\bdZ)}}.

The sum of the part of variances of all multi-indices is equal to 1:

.. math::
    \sum_{\idx \in \mathcal{J}_P} \operatorname{PoV}_\idx = 1.

Hence, we can identify the multi-indices which contribute
more significantly to the variance of the output by sorting the
multi-indices by decreasing order of their part of variance.
This result is printed by the `str` representation of the
`FunctionalChaosSobolIndices` class and is accessed by the 
`print` function: see an example of this below.

All the Sobol' indices that we introduce in this section depend on a 
specific set of multi-indices. 
Let :math:`\mathcal{J}^S \subseteq \mathcal{J}_P` a subset of the multi-indices 
involved in the polynomial chaos expansion.
Let :math:`\operatorname{S}^{PCE}` be the function of the coefficients associated 
to the multi-indices :math:`\mathcal{J}^S`, defined by: 

.. math::
    \operatorname{S}^{PCE}\left(\mathcal{J}^S\right) 
    = \frac{\sum_{\idx \in \mathcal{J}^S} a_\idx^2 \|\psi_\idx\|^2}{\Var{\tilde{h}(\bdZ)}}.

Then any Sobol' index :math:`S` can be defined by the equation:

.. math::
    S = \operatorname{S}^{PCE}\left(\mathcal{J}^S\right).

If the polynomial basis is orthonormal, therefore:

.. math::
    \operatorname{S}^{PCE}\left(\mathcal{J}^S\right) 
    = \frac{\sum_{\idx \in \mathcal{J}^S} a_\idx^2}{\Var{\tilde{h}(\bdZ)}}.


Hence, in the methods presented below, each Sobol' index is defined
by its corresponding set of multi-indices.

Examples
--------
Create a polynomial chaos for the Ishigami function:

>>> import openturns as ot
>>> from math import pi
>>> import openturns.viewer as otv

Create the function:

>>> ot.RandomGenerator.SetSeed(0)
>>> formula = ['sin(X1) + 7. * sin(X2)^2 + 0.1 * X3^4 * sin(X1)']
>>> input_names = ['X1', 'X2', 'X3']
>>> g = ot.SymbolicFunction(input_names, formula)

Create the probabilistic model:

>>> distributionList = [ot.Uniform(-pi, pi)] * 3
>>> distribution = ot.ComposedDistribution(distributionList)

Create a training sample:

>>> N = 100 
>>> inputTrain = distribution.getSample(N)
>>> outputTrain = g(inputTrain)

Create the chaos:

>>> chaosalgo = ot.FunctionalChaosAlgorithm(inputTrain, outputTrain, distribution)
>>> chaosalgo.run()
>>> result = chaosalgo.getResult()

Print Sobol' indices (see :doc:`/auto_meta_modeling/polynomial_chaos_metamodel/plot_chaos_ishigami_grouped_indices`
for details):

>>> chaosSI = ot.FunctionalChaosSobolIndices(result) 
>>> #print(chaosSI)  # Prints a table of multi-indices

Get first order Sobol' index for X0:

>>> s0 = chaosSI.getSobolIndex(0)
>>> print('S(0) = ', s0)
S(0) =  0.26...

Get total order Sobol' index for X0:

>>> st0 = chaosSI.getSobolTotalIndex(0)
>>> print('ST(0) = ', st0)
ST(0) =  0.48...

Get interaction Sobol' index for the group (X0, X1):

>>> s01 = chaosSI.getSobolIndex([0, 1])
>>> print('S([0, 1]) = ', s01)
S([0, 1]) =  0.00...

Get total interaction Sobol' index for the group (X0, X1):

>>> st01 = chaosSI.getSobolTotalIndex([0, 1])
>>> print('ST([0, 1]) = ', st01)
ST([0, 1]) =  0.00...

Get first order Sobol' index for group [X0,X1]:

>>> sg01 = chaosSI.getSobolGroupedIndex([0,1])
>>> print('SG([0, 1]) = ', sg01)
SG([0, 1]) =  0.76...

Get total order Sobol' index for group [X0,X1]:

>>> stg01 = chaosSI.getSobolGroupedTotalIndex([0,1])
>>> print('STG([0, 1]) = ', stg01)
STG([0, 1]) =  0.99..."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getFunctionalChaosResult
"Accessor to the functional chaos result.

Returns
-------
functionalChaosResult : :class:`~openturns.FunctionalChaosResult`
    The functional chaos result resulting from a polynomial chaos decomposition."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getSobolIndex
"Get the first order Sobol' index of an input variable.

This function can manage either a single variable or a group of variables.

*Case 1: single variable.* 
Let :math:`i \in \{0, ..., d - 1\}` the index of an input 
variable. 
Let :math:`\mathcal{J}_i^S` the set of multi-indices such that 
:math:`\alpha_i>0` and the other components of the multi-indices are zero:

.. math::
    \mathcal{J}_i^S
    =\left\{\idx=(0,..., 0,\alpha_i,0,...,0) \in \mathcal{J}_P, 
    \quad \alpha_i > 0\right\}.

Therefore, the first order Sobol' index :math:`S_i` of the variable 
:math:`X_i` is: 

.. math::
    S_i = \operatorname{S}^{PCE}\left(\mathcal{J}_i^S\right).

*Case 2: group of variables.*
Let :math:`\bdu \subseteq \{0, ..., d-1\}` the list of variable indices
in the group. 
Let :math:`\mathcal{J}_\bdu` the set of multi-indices:

.. math::
    \mathcal{J}_\bdu
    =\left\{\idx\in\mathcal{J}_P, 
    \quad \idx\neq \boldsymbol{0}, \quad 
    \alpha_i = 0 \textrm{ if } i \not\in \bdu\right\}.

Therefore, the interaction (high order) Sobol' index :math:`S_\bdu` is: 

.. math::
    S_\bdu = \operatorname{S}^{PCE}\left(\mathcal{J}_\bdu\right).

Parameters
----------
i : int or sequence of int, :math:`0 \leq i < d - 1`
    Indice(s) of the variable(s). 
marginalIndex : int
    Output marginal index.
    Default value is 0, i.e. the first output.

Returns
-------
s : float
    The first order Sobol' index."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getSobolTotalIndex
"Get the total Sobol' index of an input variable.

*Case 1: single variable.* 
Let :math:`i \in \{0, ..., d - 1\}` the index of an input 
variable. 
Let :math:`\mathcal{J}_i^T` the set of multi-indices such that 
:math:`\alpha_i> 0`:

.. math::
    \mathcal{J}_i^T
    =\left\{\idx=(\alpha_1,...,\alpha_i,...,\alpha_p) \in \mathcal{J}_P, 
    \quad \alpha_i > 0\right\}.

Therefore, the total order index :math:`S^T_i` is: 

.. math::
    S^T_i = \operatorname{S}^{PCE}\left(\mathcal{J}_i^T\right).

*Case 2: group of variables.*
Let :math:`\bdu \subseteq \{0, ..., d-1\}` the list of variable indices
in the group. 
Let :math:`\mathcal{J}_\bdu` the set of multi-indices:

.. math::
    \mathcal{J}_\bdu^{T, i}
    =\left\{\boldsymbol{\alpha}\in\mathcal{J}_P, 
    \quad \boldsymbol{\alpha}\neq \boldsymbol{0}, \quad 
    \alpha_i >0 \textrm{ if } i \in \boldsymbol{u}\right\}.

Therefore, the total interaction (high order) Sobol' index :math:`S_\bdu` is: 

.. math::
    S_\bdu^{T, i} = \operatorname{S}^{PCE}\left(\mathcal{J}_\bdu^{T, i}\right).

Parameters
----------
i : int or sequence of int, :math:`0 \leq i < d - 1`
    Indice(s) of the variable(s).
marginalIndex : int
    Output marginal index.
    Default value is 0, i.e. the first output.

Returns
-------
s : float
    The total Sobol' index."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getSobolGroupedIndex
"Get the grouped Sobol first order (closed) indices of a group of input variables.

Let :math:`\mathcal{J}_\bdu^{S, \operatorname{cl}}` the set of multi-indices such that 
each component of :math:`\idx` is contained in the group :math:`\bdu`:

.. math::
    \mathcal{J}_\bdu^{S, \operatorname{cl}}
    = \left\{\idx\in\mathcal{J}_P, 
      \quad \idx\neq \boldsymbol{0}, \quad \alpha_i=0 \quad \textrm{or} 
      \quad i \in \bdu, \quad i=0,\ldots, d - 1\right\}.

Therefore, the first order (closed) Sobol' index :math:`S^{\operatorname{cl}}_\bdu` 
is: 

.. math::
    S^{\operatorname{cl}}_\bdu 
    = \operatorname{S}^{PCE}\left(\mathcal{J}_\bdu^{S, \operatorname{cl}}\right).

Parameters
----------
variableIndices : sequence of int, :math:`0 \leq i < d - 1`
    Indice(s) of the variable(s) in the group.
marginalIndex : int
    Output marginal index.
    Default value is 0, i.e. the first output.

Returns
-------
s : float
    The grouped Sobol' first order index."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getSobolGroupedTotalIndex
"Get the grouped Sobol' total order index of a group of input variables.


Let :math:`\mathcal{J}_\bdu^T` the set of multi-indices:

.. math::
    \mathcal{J}_\bdu^T 
    = \left\{\idx\in\mathcal{J}_P, 
    \quad \idx\neq \boldsymbol{0}, \quad \exists i\in\{0,\ldots, d - 1\} \quad \textrm{s.t.} 
    \quad i \in \bdu\right\}.

Therefore, the first order Sobol' index :math:`S^{\operatorname{cl}}_\bdu` is: 

.. math::
    S^T_\bdu = \operatorname{S}^{PCE}\left(\mathcal{J}_\bdu^T\right).

Parameters
----------
variableIndices : sequence of int, :math:`0 \leq i < d - 1`
    Indice(s) of the variable(s) we want the associated grouped total Sobol' indices.
marginalIndex : int
    Output marginal index.
    Default value is 0, i.e. the first output.

Returns
-------
s : float
    The grouped Sobol' total order index."

// ---------------------------------------------------------------------

%feature("docstring") OT::FunctionalChaosSobolIndices::getSobolGroupedInteractionIndex
"Get the grouped Sobol' interaction indices.

Let :math:`\mathcal{J}_\bdu` the set of multi-indices:

.. math::
    \mathcal{J}_\bdu
    =\left\{\idx\in\mathcal{J}_P, 
    \quad \idx\neq \boldsymbol{0}, \quad 
    \alpha_i = 0 \textrm{ if } i \not\in \bdu\right\}.

Therefore, the interaction (high order) Sobol' index :math:`S_\bdu` is: 

.. math::
    S_\bdu = \operatorname{S}^{PCE}\left(\mathcal{J}_\bdu\right).

Parameters
----------
variableIndices : sequence of int, :math:`0 \leq i < d - 1`
    Indice(s) of the variable(s).
marginalIndex : int
    Output marginal index.
    Default value is 0, i.e. the first output.

Returns
-------
s : float
    The grouped Sobol' interaction index."
