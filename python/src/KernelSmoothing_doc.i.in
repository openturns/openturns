%feature("docstring") OT::KernelSmoothing
"Non parametric continuous distribution estimation by kernel smoothing.

Refer to :ref:`kernel_smoothing`.

Parameters
----------
kernel : :class:`~openturns.Distribution`, optional
    Univariate distribution of the kernel that will be used. By default, the standard Normal distribution is used. 
bined : bool, optional
    Activates bining mecanism only in the univariate or bivariate cases. It allows to speed up the manipulation of the density function of the resulting distribution.  By default, the mecanism is activated.
binNumber : int, :math:`binNumber \geq 2`, optional
    Indicates the number of bins used by the bining mecanism. By default, OpenTURNS uses the values stored in the *ResourceMap*.
boundaryCorrection : bool, optional
    Activates the boundary correction using the mirroring technique.
    By default, the correction is not provided.

Notes
-----
The binning mecanism creates a regular grid of *binNumber* intervals in each
dimension, then the unit weight of each point is linearly affected to the vertices
of the bin containing the point. See [wand1994]_ for the details.

The boundary correction is available only in one dimension, and it is done using
the mirroring technique. See the notes of the *setBoundingOption* method for the
details.

When applied to multivariate samples, the kernel is the kernel product of the
univariate distribution specified in the constructor. 

Examples
--------
Fit a distribution on data thanks to the kernel smoothing technique:

>>> import openturns as ot
>>> sample = ot.Gamma(6.0, 1.0).getSample(100)
>>> kernel = ot.KernelSmoothing()
>>> fittedDist = kernel.build(sample)

Compare the PDFs:

>>> graph = fittedDist.drawPDF()
>>> graph.add( ot.Gamma(6.0, 1.0).drawPDF())
>>> graph.setColors(['blue', 'red'])
>>> graph.setLegends(['KS dist', 'Gamma'])
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::buildAsKernelMixture
"Fit a kernel smoothing distribution on data.

Parameters
----------
sample : 2-d sequence of float
    Data on which the distribution is fitted. Any dimension.
bandwidth : :class:`~openturns.Point`, optional
    Contains the bandwith in each direction.

Returns
-------
fittdDist : :class:`~openturns.KernelMixture`
    The fitted distribution.

Notes
-----
It builds a :math:`~openturns.KernelMixture` using the given data and bandwidth regardless of the binning or boundary treatment flags.

Examples
--------

>>> import openturns as ot
>>> sample = ot.Exponential(1.0).getSample(1000)
>>> smoother = ot.KernelSmoothing()
>>> kernelMixture = smoother.buildAsKernelMixture(sample, [1.0])
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::buildAsMixture
"Fit a kernel smoothing distribution on data.

Parameters
----------
sample : 2-d sequence of float
    Data on which the distribution is fitted. Any dimension.
bandwidth : :class:`~openturns.Point`, optional
    Contains the bandwith in each direction.

Returns
-------
fittdDist : :class:`~openturns.KernelMixture`
    The fitted distribution.

Notes
-----
It builds a :math:`~openturns.Mixture` using the given bandwidth and a binning of the given data regardless of the bin number, the data size, the binning flag or boundary treatment flags. This method is available only for 1D or 2D samples.

Examples
--------

>>> import openturns as ot
>>> sample = ot.Exponential(1.0).getSample(1000)
>>> smoother = ot.KernelSmoothing(ot.Normal(), True, 100, False)
>>> mixture = smoother.buildAsMixture(sample, [1.0])
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::buildAsTruncatedDistribution
"Fit a kernel smoothing distribution on data.

Parameters
----------
sample : 2-d sequence of float
    Data on which the distribution is fitted. Any dimension.
bandwidth : :class:`~openturns.Point`, optional
    Contains the bandwith in each direction.

Returns
-------
fittdDist : :class:`~openturns.KernelMixture`
    The fitted distribution.

Notes
-----
It builds a :math:`~openturns.TruncatedDistribution` using the given bandwidth and the given data regardless of the boundary treatment flags. A binning is done if asked for and if the sample size is greater than the bin number. Then, the corresponding :class:`~openturns.KernelMixture` if no binning, :class:`~openturns.Mixture` otherwise, is truncated to the range of the sample.

Examples
--------

>>> import openturns as ot
>>> sample = ot.Exponential(1.0).getSample(1000)
>>> smoother = ot.KernelSmoothing(ot.Normal(), False, 0, True)
>>> truncated = smoother.buildAsTruncatedDistribution(sample, [1.0])
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::build
"Fit a kernel smoothing distribution on data.

Parameters
----------
sample : 2-d sequence of float
    Data on which the distribution is fitted. Any dimension.
bandwidth : :class:`~openturns.Point`, optional
    Contains the bandwith in each direction. If not specified, the bandwith is calculated using the mixed rule from data.

Returns
-------
fittdDist : :class:`~openturns.Distribution`
    The fitted distribution.

Notes
-----
According to the dimension of the data and the specified treatments, the resulting distribution differs.

- If the sample is constant, a :class:`~openturns.Dirac` distribution is built.
- If dimension > 2 or if no treatment has been asked for, a :class:`~openturns.KernelMixture` is built by calling *buildAsKernelMixture*. 
- If dimension = 1 and a boundary treatment has been asked for, a :class:`~openturns.TruncatedDistribution` is built by calling *buildAsTruncatedDistribution*
- If dimension = 1 or 2 and no boundary treatment has been asked for, but a binning treatment has been asked for,

    - If the sample size is greater than the bin number, then a :class:`~openturns.Mixture` is built by calling `buildAsMixture`
    - Otherwise a :class:`~openturns.KernelMixture` is built by calling `buildAsKernelMixture`
    
The bandwidth selection depends on the dimension.

- If dimension = 1, then `computeMixedBandwidth` is used.
- Otherwise, then the only multivariate rule `computeSilvermanBandwidth` is used.

Examples
--------
See the effect of the boundary correction:

>>> import openturns as ot
>>> sample = ot.Exponential(1.0).getSample(1000)
>>> smoother = ot.KernelSmoothing()
>>> fittedDistNoCorr = smoother.build(sample)
>>> smoother.setBoundaryCorrection(True)
>>> fittedDistWithCorr = smoother.build(sample)

Compare the PDFs:

>>> graph = ot.Exponential(1.0).drawPDF()
>>> graph.add(fittedDistNoCorr.drawPDF())
>>> graph.add(fittedDistWithCorr.drawPDF())
>>> graph.setColors(['black', 'blue', 'red'])
>>> graph.setLegends(['Exp dist', 'No boundary corr', 'Boundary corr'])
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::getBandwidth
"Accessor to the bandwith used in the kernel smoothing.

Returns
-------
bandwidth : :class:`~openturns.Point`
    Bandwith used in each direction. 
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::getKernel
"Accessor to kernel used in the kernel smoothing.

Returns
-------
kernel : :class:`~openturns.Distribution`
    Univariate distribution used to build the kernel.
"

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setBoundaryCorrection
"Accessor to the boundary correction flag.

Parameters
----------
boundaryCorrection : bool
    Activates the boundary correction using the mirroring technique."

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setBoundingOption
"Accessor to the boundary correction option.

Parameters
----------
boundingOption : int
    Select the boundary correction option, see notes.

Notes
-----
The possible values for the bounding option are:

    - KernelSmoothing.NONE  or 0: no boundary correction
    - KernelSmoothing.LOWER or 1: apply the boundary correction to the lower bound
    - KernelSmoothing.UPPER or 2: apply the boundary correction to the upper bound
    - KernelSmoothing.BOTH  or 3: apply the boundary correction to both bounds

It applies only to 1D samples. Each bound can be defined by the user or computed
automatically from the sample, see *setLowerBound*, *setUpperBound*,
*setAutomaticLowerBound*, *setAutomaticUpperBound*."

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setLowerBound
"Accessor to the lower bound for boundary correction.

Parameters
----------
lowerBound : float
    A user-defined lower bound to take into account for boundary correction.

Notes
-----
This method automatically sets the *automaticLowerBound* flag to *False*.
The given value will be taken into account only if *boundingOption* is set to
either 1 or 3. If the algorithm is applied to a sample with a minimum value
less than the user-defined lower bound and the *automaticLowerBound* is set to
*False*, then an exception it raised.
"

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setUpperBound
"Accessor to the upper bound for boundary correction.

Parameters
----------
upperBound : float
    A user-defined lower bound to take into account for boundary correction.

Notes
-----
This method automatically sets the *automaticLowerBound* flag to *False*.
The given value will be taken into account only if *boundingOption* is set to
either 1 or 3. If the algorithm is applied to a sample with a minimum value
less than the user-defined lower bound and the *automaticLowerBound* is set to
*False*, then an exception it raised.
"

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setAutomaticLowerBound
"Accessor to the flag for an automatic selection of lower bound.

Parameters
----------
automaticLowerBound : bool
    Flag to tell if the user-defined lower bound has to be taken into account (value *False*) or if the minimum of the given sample has to be used (value *True*)."

// ---------------------------------------------------------------------

%feature("docstring") OT::KernelSmoothing::setAutomaticUpperBound
"Accessor to the flag for an automatic selection of upper bound.

Parameters
----------
automaticUpperBound : bool
    Flag to tell if the user-defined upper bound has to be taken into account (value *False*) or if the maximum of the given sample has to be used (value *True*)."

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::computeSilvermanBandwidth
"Compute the bandwith according to the Silverman rule.

Returns
-------
bandwidth : :class:`~openturns.Point`
    Bandwith which components are evaluated according to the Silverman rule assuming a normal distribution. The bandwith uses a robust estimate of the sample standard deviation, based on the interquartile range (rather than the standard deviation of the distribution and the sample). This method can manage a multivariate sample and produces a multivariate bandwidth.
"

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::computePluginBandwidth
"Compute the bandwith according to the plugin rule.

Returns
-------
bandwidth : :class:`~openturns.Point`
    Bandwith wich components are evaluated according to the plugin rule. 

Notes
-----
This plug-in method is based on the solve-the-equation rule from (Sheather, Jones, 1991).
This method can take a lot of time for large samples, as the cost is  quadratic with the sample size.

The `KernelSmoothing-CutOffPlugin` key of the :class:`~openturns.ResourceMap` controls
the accuracy of the approximation used to estimate the rugosity of the
second derivative of the distribution.
The default value ensures that terms in the sum which weight are lower than
4.e-6 are ignored, which can reduce the calculation in some situations.
The properties of the standard gaussian density are so that,
in order to make the computation exact, the value of the
`KernelSmoothing-CutOffPlugin` must be set to 39, but this may increase the
computation time."

// ---------------------------------------------------------------------
%feature("docstring") OT::KernelSmoothing::computeMixedBandwidth
"Compute the bandwith according to a mixed rule.

Returns
-------
bandwidth : :class:`~openturns.Point`
    Bandwith wich components are evaluated according to a mixed rule.

Notes
----- 
Use the plugin rule for small sample, estimate the ratio between the plugin rule and the Silverman rule on this small sample, and finally scale the Silverman bandwidth computed on the full sample with this ratio. The size of the small sample is based on the `KernelSmoothing-SmallSize` key of the `ResourceMap`.
"
