%feature("docstring") OT::QuadraticTaylor
"Second order polynomial response surface by Taylor expansion.

Available constructors:
    QuadraticTaylor(*center, function*)

Parameters
----------
center : sequence of float
    Point :math:`\ux_0`.
function : :class:`~openturns.Function`
    Function :math:`h` to be approximated around :math:`\ux_0`.

Notes
-----
We denote by :math:`h: \Rset^d \rightarrow \Rset^q` the function to be approximated and :math:`\uy=h(\ux)`.

The quadratic Taylor expansion of :math:`h` at the point :math:`\ux_0` is the function :math:`\hat{h}: \Rset^d \rightarrow \Rset^q` defined  by:

.. math::

    \hat{h}(\ux) = h(\ux_0) + \mat{L} (\ux-\ux_0) +  \frac{1}{2}  \left\langle \left\langle\mat{Q}, \ux-\ux_0 \right \rangle, \ux-\ux_0 \right \rangle


where :math:`\mat{L} = (L_{ij})_{1 \leq i \leq q, 1\leq j \leq d}` is the Jacobian matrix evaluated at :math:`\ux_0`:

.. math::

    L_{ij} = \left(\frac{\partial h_i}{\partial x_i}\right)(\ux_0)


and :math:`\mat{Q} = (Q_{ijk})_{1 \leq i,j \leq d, 1\leq k \leq q}` is the Hessian tensor of dimension 3 evaluated at :math:`\ux_0`:

.. math::

    Q_{ijk} = \left(\frac{\partial^2 h_k}{\partial x_i\partial x_j}\right)(\ux_0)


See also
--------
LinearTaylor, LinearLeastSquares, QuadraticLeastSquares

Examples
--------
>>> import openturns as ot
>>> formulas = ['x1 * sin(x2)', 'cos(x1 + x2)', '(x2 + 1) * exp(x1 - 2 * x2)']
>>> myFunc = ot.SymbolicFunction(['x1', 'x2'], formulas)
>>> myTaylor = ot.QuadraticTaylor([1, 2], myFunc)
>>> myTaylor.run()
>>> responseSurface = myTaylor.getMetaModel()
>>> print(responseSurface([1.2,1.9]))
[1.13655,-0.999155,0.214084]"

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getCenter
"Get the center.

Returns
-------
center : :class:`~openturns.Point`
    Point :math:`\ux_0` where the Taylor expansion of the function is
    performed."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getConstant
"Get the constant vector of the approximation.

Returns
-------
constantVector : :class:`~openturns.Point`
    Point :math:`h(\ux_0)`."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getLinear
"Get the gradient of the function at :math:`\ux_0`.

Returns
-------
gradient : :class:`~openturns.Matrix`
    The matrix :math:`\mat{L}`."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getQuadratic
"Get the hessian of the function at :math:`\ux_0`.

Returns
-------
tensor : :class:`~openturns.SymmetricTensor`
    The tensor :math:`\mat{Q}`."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getInputFunction
"Get the function.

Returns
-------
function : :class:`~openturns.Function`
    Function :math:`h` to be approximated."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::getMetaModel
"Get an approximation of the function.

Returns
-------
approximation : :class:`~openturns.Function`
    The quadratic Taylor expansin of :math:`h` at :math:`\ux_0`."

// ---------------------------------------------------------------------

%feature("docstring") OT::QuadraticTaylor::run
"Perform the Quadratic Taylor expansion around :math:`\ux_0`."
