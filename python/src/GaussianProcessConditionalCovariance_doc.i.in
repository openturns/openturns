%feature("docstring") OT::GaussianProcessConditionalCovariance
"Conditional covariance post processing of a Gaussian Process Regression result.

.. warning::
    This class is experimental and likely to be modified in future releases.
    To use it, import the ``openturns.experimental`` submodule.

Parameters
----------
gprResult :  :class:`~openturns.experimental.GaussianProcessRegressionResult`
    The result class built by :class:`~openturns.experimental.GaussianProcessRegression`.


Notes
-----
Refer to the documentation of :class:`~openturns.experimental.GaussianProcessRegression` to get details on the notations.

The class provides services around related to the conditional covariance of the Gaussian Process Regression.


Examples
--------
Create the model :math:`g: \Rset \mapsto \Rset` and the samples:

>>> import openturns as ot
>>> from openturns.experimental import GaussianProcessRegression
>>> from openturns.experimental import GaussianProcessConditionalCovariance
>>> trend = ot.SymbolicFunction(['x'],  ['1'])
>>> sampleX = [[1.0], [2.0], [3.0], [4.0], [5.0], [6.0]]
>>> sampleY = trend(sampleX)

Create the algorithm:

>>> covarianceModel = ot.SquaredExponential([1.0])
>>> covarianceModel.setActiveParameter([])

>>> algo = GaussianProcessRegression(sampleX, sampleY, covarianceModel, trend)
>>> algo.run()
>>> result = algo.getResult()
>>> condCov = GaussianProcessConditionalCovariance(result)
>>> c = condCov([1.1])

"


// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getConditionalMean
"Compute the conditional mean of the Gaussian process on a point or a sample of points.

Parameters
----------
x : sequence of float
    The point :math:`\vect{x}` where the conditional mean of the output has to be evaluated.
sampleX : 2-d sequence of float
     The sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)` where the conditional mean of the output has to be evaluated (*N* can be equal to 1).

Returns
-------
condMean : :class:`~openturns.Point`
    The conditional mean the Gaussian process regression :math:`\vect{Z}` defined in :eq:`GPRdef` at point :math:`\vect{x}` or on the sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)`:

    .. math::

        \left(
          \begin{array}{l}
            \Expect{\vect{Z}(\omega, \vect{\xi}_1)}\\
            \dots  \\
            \Expect{\vect{Y}(\omega, \vect{\xi}_N)}
          \end{array}
        \right)

    This vector is in :math:`\Rset^{N \times \outputDim}`.
"


// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getConditionalCovariance
"Compute the conditional covariance of the Gaussian process on a point (or several points).

Parameters
----------
x : sequence of float
    The point :math:`\vect{x}` where the conditional covariance of the output has to be evaluated.
sampleX : 2-d sequence of float
     The sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)` where the conditional covariance of the output has to be evaluated (*N* can be equal to 1).

Returns
-------
condCov : :class:`~openturns.CovarianceMatrix`
    The conditional covariance of the Gaussian process regression  :math:`\vect{Z}` defined in :eq:`GPRdef` at point :math:`\vect{x}` is defined in :eq:`covarianceGPR_point`. When computed on the sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_M)`, the covariance matrix is defined in :eq:`covarianceGPR_sample`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getDiagonalCovariance
"Compute the diagonal conditional covariance of the Gaussian process on a point.

Parameters
----------
x : sequence of float
    The point :math:`\vect{x}` where the conditional marginal covariance of the output has to be evaluated.

Returns
-------
condCov : :class:`~openturns.CovarianceMatrix`
    The conditional covariance :math:`\Cov{\vect{Y}(\omega, \vect{x})\, | \,  \cC}` at point :math:`\vect{x}`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getDiagonalCovarianceCollection
"Compute the conditional covariance of the Gaussian process on a sample.

Parameters
----------
sampleX : 2-d sequence of float
     The sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)` where the conditional marginal covariance of the output has to be evaluated (*N* can be equal to 1).

Returns
-------
condCov : :class:`~openturns.CovarianceMatrixCollection`
    The collection of conditional covariance matrices :math:`\Cov{\vect{Z}(\omega, \vect{\xi}_i)}
    = \mat{\Sigma_{ii}}` for :math:`1 \leq i \leq N` defined in :eq:`covarianceGPR_sample`.

Notes
-----
Each element of the collection corresponds to the conditional covariance with respect to the input learning set
(e.g. a pointwise evaluation of the `getDiagonalCovariance`). The returned collection is
of size :math:`N` and contains matrices in :math:`\cM_{\outputDim, \outputDim}(\Reset)`."
// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getConditionalMarginalVariance
"Compute the conditional variance of the Gaussian process on a point (or several points).

Parameters
----------
x : sequence of float
    The point :math:`\vect{x}` where the conditional variance of the output has to be evaluated.
sampleX : 2-d sequence of float
     The sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)` where the conditional variance of the output has to be evaluated (*N* can be equal to 1).
marginalIndex : int
    Marginal of interest (for multiple outputs).
    
    Default value is 0 (first component).
marginalIndices : sequence of int
    Marginals of interest (for multiple outputs).

Returns
-------
var : float
      The variance of the specified marginal of the Gaussian process regression  :math:`\vect{Z}`
      defined in :eq:`GPRdef` at the specified point.

varPoint : sequence of float
    The marginal variances of each marginal of interest computed at each given point.


Notes
-----
If only one  marginal :math:`k`  of interest  and one point  :math:`\vect{x}` have been specified,
the method returns :math:`\Var{Z_k(\omega, \vect{x}}` where :math:`\vect{Z}` is the Gaussian
process regression  defined in :eq:`GPRdef`.

If several marginal of interest :math:`k_1, \dots, k_M)` or several points :math:`(\vect{\xi}_1,
\dots, \vect{\xi}_N)` have been specified, the method returns the concatenation of 
sequence of variances :math:`(\Var{Z_{k_1}(\omega, \vect{\xi}_j}, \dots, \Var{Z_{k_M}(\omega, \vect{\xi}_j})` for each :math:`1 \leq j \leq N`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::operator()
"Compute the conditional Gaussian distribution on a new point / sample conditionally to the observed paths.

Parameters
----------
pt : sequence of float
    The point :math:`\vect{x}` where the conditional distribution of the output has to be evaluated.
sampleX : 2-d sequence of float
     The sample :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)` where the conditional distribution of the output has to be evaluated (*N* can be equal to 1).

Returns
-------
condDist : :class:`~openturns.Normal`
    The conditional Gaussian distribution.

Notes
-----
The conditional distribution of the Gaussian
process regression :math:`(\vect{Z}` defined in :eq:`GPRdef` and computed at :math:`\vect{x}` or at :math:`(\vect{\xi}_1, \dots, \vect{\xi}_N)`.
In the first case, the method returns a Gaussian distribution of dimension :math:`\outputDim`,
while in the second case, the method returns a Gaussian distribution of dimension
:math:`N \times \outputDim`. The mean and the coarance matrix of the resulting distribution are
computed by :meth:`getConditionalMean` and :meth:`getConditionalCovariance`."

// ---------------------------------------------------------------------

%feature("docstring") OT::GaussianProcessConditionalCovariance::getMetaModel
"Accessor to the metamodel.

Returns
-------
metaModel : :class:`~openturns.Function`
    The Gaussian process regression meta model :math:`\tilde{g}: \Rset^\inputDim \rightarrow \Rset^\outputDim` defined in :eq:`GPRmetamodel`."

