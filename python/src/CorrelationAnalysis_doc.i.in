%feature("docstring") OT::CorrelationAnalysis
"Correlation analysis methods.

Provides elementary sensitivity analysis methods
to determine the influence of the different inputs
over a one-dimensional output.

Parameters
----------
inputSample : 2-d list of float
    Values taken by the random input variables.
outputSample : 2-d list of float
    Values of the output. Must be one-dimensional.

See also
--------
LinearModelAlgorithm

Examples
--------
>>> import openturns as ot
>>> inputSample = ot.Normal(3).getSample(100)
>>> model = ot.SymbolicFunction(['x', 'y', 'z'], ['x + 3 * y - 5 * z'])
>>> outputSample = model(inputSample)
>>> corr_analysis = ot.CorrelationAnalysis(inputSample, outputSample)
>>> print(corr_analysis.computePearsonCorrelation())
[0.153352,0.537644,-0.760563]"

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computePCC
"Correlation evaluation based on the Partial Correlation Coefficient.

Refer to :ref:`ranking_pcc`.

Returns
-------
coef : :class:`~openturns.Point`
    The PCC coefficients evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computePRCC
"Correlation evaluation based on the Partial Rank Correlation Coefficient.

Refer to :ref:`ranking_pcc`.

Returns
-------
coef : :class:`~openturns.Point`
    The PRCC coefficients evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computePearsonCorrelation
"Correlation evaluation based on the Pearson correlation coefficient.

Refer to :ref:`pearson_coefficient`.

Returns
-------
coef : :class:`~openturns.Point`
    The Pearson coefficients evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computeSpearmanCorrelation
"Correlation evaluation based on the Spearman correlation coefficient.

Refer to :ref:`spearman_coefficient`.

Returns
-------
coef : :class:`~openturns.Point`
    The Spearman coefficients evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computeKendallTau
"Correlation evaluation based on Kendall's :math:`\tau` coefficient.

See the :class:`~openturns.Sample` :meth:`~openturns.Sample.computeKendallTau` method for details.

Returns
-------
coef : :class:`~openturns.Point`
    Kendall's :math:`\tau` coefficients evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computeSRC
"Correlation evaluation based on the Standard Regression Coefficient.

Refer to :ref:`ranking_src`.

Returns
-------
coef : :class:`~openturns.Point`
    The SRC evaluated between the *outputSample* and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computeSRRC
"Correlation evaluation based on the Standard Rank Regression Coefficient.

Refer to :ref:`ranking_src`.

Returns
-------
coef : :class:`~openturns.Point`
    The SRRC evaluated between the *outputSample*
    and each coordinate of the *inputSample*."

// ---------------------------------------------------------------------

%feature("docstring") OT::CorrelationAnalysis::computeSquaredSRC
"Correlation evaluation based on the square of the Standard Regression Coefficient.

Refer to :ref:`ranking_src`.

Parameters
----------
normalize : bool
    If True, coefficients sum to one.
    Default value is False.

Returns
-------
coef : :class:`~openturns.Point`
    The squared SRC evaluated between the *outputSample*
    and each coordinate of the *inputSample*."
