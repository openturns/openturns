%feature("docstring") OT::TaylorExpansionMoments
"First and second order Taylor expansion formulas.


Parameters
----------
limitStateVariable : :class:`~openturns.RandomVector`
    It must be of type *Composite*, which means it must have
    been defined with the class :class:`~openturns.CompositeRandomVector`.

Notes
-----
Assuming that :math:`\uX` has its two first moments finite and that :math:`h` is sufficiently regular,
the Taylor expansion method is used to approximate the mean and variance of the random variable :math:`\uY = h(\uX)`.

Refer to :ref:`taylor_expansion_moments` to get details on the expressions of the approximations:

- The one order  expansion of :math:`h` yields to an approximation of the mean and the variance of :math:`\uY`.
- The second order  expansion of :math:`h` yields to an approximation of the mean :math:`\uY`.


Examples
--------
>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> myFunc = ot.SymbolicFunction(['x1', 'x2', 'x3', 'x4'],
...     ['(x1*x1+x2^3*x1)/(2*x3*x3+x4^4+1)', 'cos(x2*x2+x4)/(x1*x1+1+x3^4)'])
>>> R = ot.CorrelationMatrix(4)
>>> for i in range(4):
...     R[i, i - 1] = 0.25
>>> distribution = ot.Normal([0.2]*4, [0.1, 0.2, 0.3, 0.4], R)
>>> # We create a distribution-based RandomVector
>>> X = ot.RandomVector(distribution)
>>> # We create a composite RandomVector Y from X and myFunc
>>> Y = ot.CompositeRandomVector(myFunc, X)
>>> # We create a Taylor expansion method to approximate moments
>>> myTaylorExpansionMoments = ot.TaylorExpansionMoments(Y)
>>> print(myTaylorExpansionMoments.getMeanFirstOrder())
[0.0384615,0.932544]"

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getCovariance
"Get the approximation at the first order of the covariance matrix.

Returns
-------
covariance : :class:`~openturns.CovarianceMatrix`
    Approximation at the first order of the covariance matrix of the random
    vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getGradientAtMean
"Get the gradient of the function.

Returns
-------
gradient : :class:`~openturns.Matrix`
    Gradient of the Function which defines the random vector at
    the mean point of the input random vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getHessianAtMean
"Get the hessian of the function.

Returns
-------
hessian : :class:`~openturns.SymmetricTensor`
    Hessian of the Function which defines the random vector at
    the mean point of the input random vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getImportanceFactors
"Get the importance factors.

Returns
-------
factors : :class:`~openturns.Point`
    Importance factors of the inputs : only when randVect is of dimension 1."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getLimitStateVariable
"Get the limit state variable.

Returns
-------
limitStateVariable : :class:`~openturns.RandomVector`
    Limit state variable."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getMeanFirstOrder
"Get the approximation at the first order of the mean.

Returns
-------
mean : :class:`~openturns.Point`
    Approximation at the first order of the mean of the random vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getMeanSecondOrder
"Get the approximation at the second order of the mean.

Returns
-------
mean : :class:`~openturns.Point`
    Approximation at the second order of the mean of the random vector
    (it requires that the hessian of the Function has been defined)."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::getValueAtMean
"Get the value of the function.

Returns
-------
value : :class:`~openturns.Point`
    Value of the Function which defines the random vector at
    the mean point of the input random vector."

// ---------------------------------------------------------------------

%feature("docstring") OT::TaylorExpansionMoments::drawImportanceFactors
"Draw the importance factors.

Returns
-------
graph : :class:`~openturns.Graph`
    Graph containing the pie corresponding to the importance factors of the
    probabilistic variables."
