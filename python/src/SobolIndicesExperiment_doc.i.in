%feature("docstring") OT::SobolIndicesExperiment
"Experiment to computeSobol' indices.

Available constructors:
    SobolIndicesExperiment(*distribution, size, computeSecondOrder=False*)

    SobolIndicesExperiment(*experiment, computeSecondOrder=False*)

Parameters
----------
distribution : :class:`~openturns.Distribution`
    Distribution :math:`\mu` with an independent copula used to generate the
    set of input data.
size : positive int
    Size :math:`N` of each of the two independent initial samples.
    For the total size of the experiment see notes below.
experiment : :class:`~openturns.WeightedExperiment`
    Design of experiment used to sample the distribution.
computeSecondOrder : bool, defaults to False
    Whether to add points to compute second order indices

Notes
-----
Sensitivity algorithms rely on the definition of specific designs.
The method generates design for the Saltelli method.
Such designs can be used for Jansen, Martinez and MauntzKucherenko methods.
This precomputes such input designs using distribution or experiment by
generating a sample of twice the dimension by duplicating the distribution
into a :math:`2d` distribution with repeated marginals, in order to also work
with non-iid samples such as those generated by :class:`~openturns.LHSExperiment`
or :class:`~openturns.LowDiscrepancyExperiment`. The sampling is done according
to the given experiment, then it is split into samples :math:`A` and :math:`B`
and the columns of these ones are mixed to define the huge sample (design).
If *computeSecondOrder* is set to *False*, the result design is of size
:math:`N(d+2)` where :math:`d` is the dimension of the distribution.
If *computeSecondOrder* is set to *True*, the design size is :math:`N(2d+2)`, see
[saltelli2002]_, excepted in dimension 2.
If the constructor based on the distribution is used, an experiment is built
according to the value of 'SobolIndicesExperiment-SamplingMethod' in :class:`~openturns.ResourceMap`:

    - If it is equal to 'LHS', a :class:`~openturns.LHSExperiment` is used, with *AlwaysShuffle* and *RandomShift* set to *True*
    - If it is equal to 'QMC' and :math:`d\leq SobolSequence.MaximumNumberOfDimension`, a :class:`~openturns.LowDiscrepancyExperiment` is used in conjunction with :class:`~openturns.SobolSequence`, with *Randomize* set to *False*. If :math:`d` is too large, it falls back to the 'LHS' case.
    - Otherwise a :class:`~openturns.MonteCarloExperiment` is used. It is the default choice in order to allow :class:`~openturns.SobolIndicesAlgorithm` to use the asymptotic distribution of the indices estimates.

The corresponding output values of a model can be evaluated outside of the
platform.

See also
--------
SobolIndicesAlgorithm

Examples
--------
>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> formula = ['sin(pi_*X1)+7*sin(pi_*X2)*sin(pi_*X2)+' + \
...    '0.1*((pi_*X3)*(pi_*X3)*(pi_*X3)*(pi_*X3))*sin(pi_*X1)']
>>> model = ot.SymbolicFunction(['X1', 'X2', 'X3'], formula)
>>> distribution = ot.ComposedDistribution([ot.Uniform(-1.0, 1.0)] * 3, \
...                                         ot.IndependentCopula(3))
>>> size = 10
>>> experiment = ot.SobolIndicesExperiment(distribution, size, True)
>>> sample = experiment.generate()"
