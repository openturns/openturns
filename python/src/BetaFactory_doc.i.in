%feature("docstring") OT::BetaFactory
"Beta factory.

Available constructor:
    BetaFactory()

Let :math:`n` be the sample sample size. 
Let :math:`x_{min}` be the sample minimum and :math:`x_{max}` be the sample maximum. 
Let :math:`\delta` be the sample range:

.. math::
    :nowrap:

    \begin{eqnarray*}
      \displaystyle \delta = x_{max} - x_{min}.
    \end{eqnarray*}

Then the distribution bounds are computed from the equations:

.. math::
    :nowrap:

    \begin{eqnarray*}
      \displaystyle\Hat{a}_n = x_{min} - \frac{\delta}{n + 2}, \\
      \displaystyle\Hat{b}_n = x_{max} + \frac{\delta}{n + 2}.
    \end{eqnarray*}

Let :math:`\bar{x}_n` be the sample mean and :math:`\hat{\sigma}_n` be the sample 
standard deviation. 
The remaining parameters are estimated from the method of moments:

.. math::
    :nowrap:

    \begin{eqnarray*}
      \displaystyle\Hat{t}_n=\frac{(\Hat{b}_n-\bar{x}_n)(\bar{x}_n-\Hat{a}_n)}{\hat{\sigma}_n^2-1}\\
      \displaystyle\Hat{r}_n=\frac{\displaystyle\Hat{t}_n (\bar{x}_n-\Hat{a}_n)}{\Hat{b}_n-\Hat{a}_n}
    \end{eqnarray*}

See also
--------
DistributionFactory, Beta

Examples
--------

In the following example, the parameters of a :class:`~openturns.Beta` 
are estimated from a sample. 

>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> size = 10000
>>> distribution = ot.Beta(0.2, 0.4, -1.0, 2.0)
>>> sample = distribution.getSample(size)
>>> factory = ot.BetaFactory()
>>> estimated_dist = factory.build(sample)
>>> estimated_beta = factory.buildAsBeta(sample)"
// ---------------------------------------------------------------------

%define OT_DistributionFactory_buildAsBeta_doc
"Build the Beta distribution.

**Available usages**:

    buildAsBeta(*sample*)

    buildAsBeta(*param*)

Parameters
----------
sample : 2-d sequence of float
    Sample from which the distribution parameters are estimated.
param : Collection of :class:`~openturns.PointWithDescription`
    A vector of parameters of the distribution.

Returns
-------
dist : :class:`~openturns.Beta`
    The built distribution."
%enddef
%feature("docstring") OT::BetaFactory::buildAsBeta
OT_DistributionFactory_buildAsBeta_doc

// ---------------------------------------------------------------------

%feature("docstring") OT::BetaFactory::buildEstimator
"Build the Beta distribution and the parameters distribution.

Parameters
----------
sample : 2-d sequence of float
    Sample from which the distribution parameters are estimated.
parameters : :class:`~openturns.DistributionParameters`
    Optional, the parametrization.

Returns
-------
resDist : :class:`~openturns.DistributionFactoryResult`
    The results.

Examples
--------
Create a sample and fit a Beta distribution and the native parameters distribution:

>>> import openturns as ot
>>> sample = ot.Beta().getSample(10)
>>> ot.ResourceMap.SetAsUnsignedInteger('DistributionFactory-DefaultBootstrapSize', 10)
>>> fittedRes = ot.BetaFactory().buildEstimator(sample)

Fit a Beta distribution in another parametrization:

>>> fittedRes2 = ot.BetaFactory().buildEstimator(sample, ot.BetaMuSigma())

Get the fitted Beta distribution and its parameters:

>>> fittedBeta =  fittedRes.getDistribution()
>>> print fittedBeta
Beta(k = 1.0452, lambda = 0.996212, Beta = 0.00031485)
>>> fittedParameters = fittedBeta.getParameter()

Get the asymptotic parameters distribution: 

>>> paramDist = fittedRes.getParameterDistribution()

Determine the confidence interval al level 0.9 with minimum volume:

>>> ot.ResourceMap.SetAsUnsignedInteger('Distribution-MinimumVomuleLevelSetSamplingSize', 100)
>>> confInt, level = paramDist.computeMinimumVolumeIntervalWithMarginalProbability(0.9)

Determine the bilateral confidence interval al level 0.9:

>>> confInt, level = paramDist.computeBilateralConfidenceIntervalWithMarginalProbability(0.9)

Determine the right unilateral confidence interval al level 0.9:

>>> confInt, level = paramDist.computeUnilateralConfidenceIntervalWithMarginalProbability(0.9)

Determine the left unilateral confidence interval al level 0.9:

>>> confInt, level = paramDist.computeUnilateralConfidenceIntervalWithMarginalProbability(0.9, True)
"
