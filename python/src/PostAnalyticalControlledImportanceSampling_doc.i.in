%feature("docstring") OT::PostAnalyticalControlledImportanceSampling
"Post analytical controlled importance sampling.

Importance sampling algorithm around the design point, controlled by
the tangent hyperplan.

Parameters
----------
analyticalResult : :class:`~openturns.AnalyticalResult`
    Result structure.

Notes
-----
Let :math:`\inputRV` be a random vector of dimension :math:`\inputDim`, distributed according to
the measure :math:`\inputMeasure`, and :math:`\model: \Rset^\inputDim \rightarrow \Rset`
be the *limit state function* (where we only wrote the random input parameters). We define the event
:math:`\cD_f` by:

.. math::

    \cD_f = \{\vect{x} \in \Rset^{\inputDim} \, | \,\model(\vect{x}) \leq 0\}

The post analytical controlled importance sampling algorithm estimates the probability of the domain :math:`\cD_f`:

.. math::

    P_f = \Prob{\model\left( \inputRV \right) \leq 0}
        = \int_{\Rset^{\inputDim}} \mathbf{1}_{\{\model(\vect{x}) \leq 0 \}}\inputMeasure(\vect{x})\di{\vect{x}}


The post analytical controlled importance sampling algorithm is an accelerated sampling method, which is
performed in the standard space, where the random variates are independent and follow the standard distribution
(which is a normal distribution or an elliptical distribution depending on which transformation between Nataf
and Rosenblatt has been used: see  :ref:`isoprobabilistic_transformation` to get more details).
It is an additive correction of the :class:`~openturns.FORM` approximation of the probability :math:`P_f`. See
:class:`~openturns.Analytical` for the description of the first steps of the FORM analysis.

Let :math:`Z` be the scalar random variate defined from the standard random vector :math:`\vect{U}` in the standard space, by: 

.. math::

    Z(\vect{U}) = \vect{u}^*.\vect{U} - \beta^2

where :math:`\vect{u}^*` is the design point in the standard space, and :math:`\beta` the distance
of the design point from the origin of the standard space: :math:`\beta = \| \vect{u}^*\|`.

The tangent hyperplan at the design point in the standard space is defined by the equation:

.. math::

    Z = 0

Let :math:`G` be the model in the standard space: if :math:`T` is the iso-probabilistic
transformation such that :math:`T(\vect{X}) = \vect{U}`, then:

.. math::

   G(\vect{u}) = \model \circ T^{-1}(\vect{u})

We assume that the domain :math:`\cD_f` does not contain the origin of the standard space. Thus, we get:

.. math::

    P_f & = \Prob{Z \geq 0} + \Prob{Z \leq 0,  G(\RVU) \leq 0} - \Prob{Z \geq 0,  G(\RVU) \geq 0}\\
        & = \Prob{Z \geq 0} + \delta_1 - \delta_2

where :math:`\Prob{Z \geq 0} = E(-\beta)` is the FORM approximation around the design point with
:math:`E` the univariate standard CDF of the standard distribution in the standard space.

If the FORM approximation is correct, then we have :math:`\delta_1 \ll \Prob{Z \geq 0}` and
:math:`\delta_2 \ll \Prob{Z \geq 0}`. Thus, in order to estimate the probability :math:`P_f`,
we use :math:`Z` as a controlled
variable and we use an importance sampling around the design point in the standard space.

We denote by :math:`(\vect{u}_i)_{1 \leq i \leq \sampleSize}` a sample generated from the standard distribution
centered on the origin of the standard space, whose pdf is denoted by :math:`e`. Let :math:`e^*` be the pdf of the
standard distribution centered on the design point :math:`\vect{u}^*`.

The estimate of :math:`P_f` is defined by:

.. math::

    \tilde{P}_f =  E(-\beta) + \dfrac{1}{\sampleSize} \sum_{i=1}^\sampleSize \left( 1_{ \left \{ z_i \leq 0,
    G(\vect{u}_i)  \leq 0 \right\} } - 1_{ \left \{ z_i \geq 0,  G(\vect{u}_i)  \geq
    0\right \} } \right) \dfrac{e(\vect{u}_i)}{e^*(\vect{u}_i)}

See also
--------
PostAnalyticalImportanceSampling

Examples
--------
>>> import openturns as ot

Create the output random vector :math:`Y = \model(\inputRV)`:

>>> f = ot.SymbolicFunction(['E', 'F', 'L', 'I'], ['-F*L^3/(3*E*I)'])
>>> distribution = ot.Normal([50.0, 1.0, 10.0, 5.0], [1.0]*4, ot.IdentityMatrix(4))
>>> X = ot.RandomVector(distribution)
>>> Y = ot.CompositeRandomVector(f, X)

Create the event :math:`\cD_f = \{\vect{x} \in \Rset^{\inputDim} \, | \,\model(\vect{x}) \leq -3.0\}`:

>>> event = ot.ThresholdEvent(Y, ot.Less(), -3.0)

Create the FORM algorithm and launch it:

>>> solver = ot.AbdoRackwitz()
>>> analytical = ot.FORM(solver, event, [50.0, 1.0, 10.0, 5.0])
>>> analytical.run()
>>> analyticalResult = analytical.getResult()

Create the post analytical importance sampling algorithm and launch it:

>>> algo = ot.PostAnalyticalControlledImportanceSampling(analyticalResult)
>>> algo.run()
>>> result = algo.getResult()
>>> pf = result.getProbabilityEstimate()"
