%feature("docstring") OT::SpatialFunction
"Spatial function.

Available constructors:
    SpatialFunction(*meshDimension=1*)

    SpatialFunction(*g, meshDimension=1*)

Parameters
----------
g : :class:`~openturns.NumericalMathFunction`
    Function :math:`g: \Rset^d \mapsto \Rset^q`.
meshDimension : int, :math:`n \geq 0`
    Dimension of the vertices of the mesh :math:`\cM`. This data is required
    for tests on the compatibility of dimension when a composite process is
    created using the spatial function.

Notes
-----
A spatial function
:math:`f_{spat}: \cD \times \Rset^d \mapsto \cD \times \Rset^q`, with
:math:`\cD \in \Rset^n`, is a particular
:class:`dynamical function <openturns.DynamicalFunction>` that lets invariant
the mesh of a field and defined by a function
:math:`g : \Rset^d  \mapsto \Rset^q` such that:

.. math::

    f_{spat}(\vect{t}, \vect{x})=(\vect{t}, g(\vect{x}))

Let's note that the input dimension of :math:`f_{spat}` still designs the
dimension of :math:`\vect{x}`: :math:`d`. Its output dimension is equal to
:math:`q`.

See also
--------
TemporalFunction

Examples
--------
>>> import openturns as ot

Create a function :math:`g : \Rset^d \mapsto \Rset^q` such as:

.. math::

    g: \left|\begin{array}{rcl}
                \Rset & \rightarrow & \Rset \\
                x & \mapsto & x^2
            \end{array}\right.

>>> g = ot.NumericalMathFunction('x', 'x^2')

Convert :math:`g` into a spatial function with :math:`n` the dimension of the
mesh of the field on which :math:`g` will be applied:

>>> n = 1
>>> mySpatialFunction = ot.SpatialFunction(g, n)
>>> # Create a TimeSeries
>>> tg = ot.RegularGrid(0.0, 0.2, 6)
>>> data = ot.NumericalSample(tg.getN(), g.getInputDimension())
>>> for i in range(data.getSize()):
...     for j in range(data.getDimension()):
...         data[i, j] = i * data.getDimension() + j
>>> ts = ot.TimeSeries(tg, data)
>>> print(ts)
    [ t   v0  ]
0 : [ 0   0   ]
1 : [ 0.2 1   ]
2 : [ 0.4 2   ]
3 : [ 0.6 3   ]
4 : [ 0.8 4   ]
5 : [ 1   5   ]
>>> print(mySpatialFunction(ts))
    [ t              outputVariable ]
0 : [  0              0             ]
1 : [  0.2            1             ]
2 : [  0.4            4             ]
3 : [  0.6            9             ]
4 : [  0.8           16             ]
5 : [  1             25             ]"

// ---------------------------------------------------------------------

%feature("docstring") OT::SpatialFunction::getEvaluation
"Get the evaluation function of :math:`g`.

Returns
-------
g : :class:`~openturns.NumericalMathEvaluationImplementation`
    Evaluation function of :math:`g: \Rset^d \mapsto \Rset^q`.

Examples
--------
>>> import openturns as ot
>>> g = ot.NumericalMathFunction('x', 'x^2')
>>> n = 1
>>> mySpatialFunction = ot.SpatialFunction(g, n)
>>> print(mySpatialFunction.getEvaluation())
[x]->[x^2]"

