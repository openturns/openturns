on:
  push:
    branches: [ master ]
  pull_request:
jobs:
  macos:
    runs-on: macos-latest
    env:
      LDFLAGS: -L/opt/homebrew/opt/openblas/lib
      CPPFLAGS: -I/opt/homebrew/opt/openblas/include
      OPENTURNS_NUM_THREADS: 2
      OMP_NUM_THREADS: 1
    steps:
    - uses: actions/checkout@v4
    - run: |
        brew install openblas swig boost tbb nlopt cminpack ceres-solver cuba dlib bison flex hdf5 ipopt primesieve spectra pagmo nanoflann
        pip3 install matplotlib scipy chaospy pandas dill --break-system-packages
    - run: |
        cmake \
        -DCMAKE_INSTALL_PREFIX=~/.local \
        -DPython_EXECUTABLE=/opt/homebrew/bin/python3 \
        -DUSE_BISON=OFF \
        -DFLEX_EXECUTABLE=/opt/homebrew/opt/flex/bin/flex \
        -DBISON_EXECUTABLE=/opt/homebrew/opt/bison/bin/bison \
        -DCMAKE_CXX_FLAGS="-Wall -Wextra -Werror" \
        -DCMAKE_SWIG_FLAGS="-Werror" -DSWIG_COMPILE_FLAGS="-O1 -Wno-unused-parameter -Wno-unused-function" \
        -DCMAKE_UNITY_BUILD=ON -DCMAKE_UNITY_BUILD_BATCH_SIZE=32 .
        make install -j3
        make tests -j3
        ctest -E GeneralizedParetoFactory_std -j3 --output-on-failure --timeout 100 --schedule-random

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
      - name: Install
        shell: cmd
        run: |
          conda install -y cmake swig ninja winflexbison "libblas=*=*netlib" mpc boost-cpp libcuba libxml2 hdf5 primesieve tbb-devel cminpack ceres-solver nlopt dlib-cpp ipopt pagmo-devel spectralib zlib nanoflann scipy pandas matplotlib-base dill
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Build
        shell: cmd
        run: |
          set "LIB=C:\Users\runneradmin\miniconda3\Library\lib;%LIB%"
          set "INCLUDE=C:\Users\runneradmin\miniconda3\Library\include;%INCLUDE%"
          cmake -G Ninja -B . -LAH ^
           -DCMAKE_INSTALL_PREFIX="C:/Users/runneradmin/miniconda3/Library" ^
           -DCMAKE_PREFIX_PATH="C:/Users/runneradmin/miniconda3/Library" ^
           -DCMAKE_CXX_FLAGS="/DWIN32 /D_WINDOWS /W3 /GR /EHsc /WX" ^
           -DCMAKE_UNITY_BUILD=ON -DCMAKE_UNITY_BUILD_BATCH_SIZE=16 ^
           -DLAPACK_LIBRARIES="C:/Users/runneradmin/miniconda3/Library/lib/lapack.lib;C:/Users/runneradmin/miniconda3/Library/lib/blas.lib" ^
           -DPython_FIND_STRATEGY=LOCATION -DPython_ROOT_DIR="C:/Users/runneradmin/miniconda3" || exit 1
          cmake --build . --target install --parallel 4 || exit 1
          ctest --output-on-failure --timeout 100 -E cppcheck -j2 --repeat after-timeout:2 --schedule-random

  aarch64:
    runs-on: ubuntu-latest
    env:
      MAKEFLAGS: -j4
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: ./utils/build_locally.sh aarch64

  coverage:
    runs-on: ubuntu-latest
    env:
      MAKEFLAGS: -j4
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: ./utils/build_locally.sh coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: openturns/openturns
          file: ./coverage/coverage.info

  mindeps:
    runs-on: ubuntu-latest
    env:
      MAKEFLAGS: -j4
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: ./utils/build_locally.sh mindeps

  freebsd:
    runs-on: ubuntu-latest
    env:
      MAKEFLAGS: -j4
      OPENTURNS_NUM_THREADS: 2
      OMP_NUM_THREADS: 1
    steps:
      - uses: actions/checkout@v4
      - uses: vmactions/freebsd-vm@v1
        with:
          envs: 'MAKEFLAGS OPENTURNS_NUM_THREADS OMP_NUM_THREADS'
          usesh: true
          prepare: |
            pkg install -y cmake git devel/llvm devel/swig devel/boost-all devel/onetbb textproc/libxml2
            pkg install -y math/lapack science/hdf5 math/nanoflann math/spectra math/primesieve math/py-matplotlib
            pkg install -y science/pagmo2 math/ipopt math/bonmin math/nlopt math/ceres-solver math/cminpack
          run: |
            git config --global --add safe.directory .
            cmake -DCMAKE_INSTALL_PREFIX=~/.local -DCMAKE_UNITY_BUILD=ON -DCMAKE_UNITY_BUILD_BATCH_SIZE=32 -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wpedantic -Wshadow -Werror -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE" -DSWIG_COMPILE_FLAGS="-O1 -Wno-shadow -Wno-unused-function" . || exit 1
            cmake --build . --target install || exit 1
            ctest --output-on-failure --timeout 200 -E cppcheck -j4 --repeat after-timeout:2 --schedule-random || exit 1
            cmake --build . --target tests || exit 1
            ctest --output-on-failure --timeout 200 -E pyinstallcheck -j4 --repeat after-timeout:2 --schedule-random || exit 1
